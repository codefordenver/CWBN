(ns cwbn.components.search-bar
  (:require [re-com.core :as re-com]
            [reagent.core :as reagent]
            [re-frame.core :as rf]
            [cljs-http.client :as http]
            [cljs.core.async :refer [<! timeout]])
  (:require-macros [cljs.core.async.macros :refer [go]]))

<<<<<<< Updated upstream
(def change-on-blur? (reagent/atom true))

(def status (reagent/atom nil))

(def rigid? (reagent/atom true))
=======
(def r (reagent/atom []))
>>>>>>> Stashed changes

;;TODO implement using core.async library
(def data-source-async
  (fn [s]
    (go
      (let [response-channel (http/get "/api/search" {:query-params {"q" s}})
            response (<! response-channel)
            results (map #(-> % :fields) (:body response))]
        (rf/dispatch [:update-search-results results])
        (reset! r results)))))
;; important! return value must be falsey for an async :data-source))

(defn css-classes [name]
  {:wrapper-classes    (str "suggestion-wrapper" " " "suggestion-wrapper-" name)
   :suggestion-classes (str "suggestion" " " "suggestion-" name)})

(defn render-suggestion [{:keys [name]}]
  (let [classes (css-classes name)]
    [:div {:class (classes :wrapper-classes)}
     [:i {:class (classes :suggestion-classes)} name]]))

(defn search-fn [e]
  (let [text (-> e .-target .-value)]
    (data-source-async text)
    (rf/dispatch [:set-active-page :search ""])))



(defn search-bar []
  [:div
   [:input {:type      "text"
            :on-change search-fn}]
   (for [result (take 10 @r)]
     ^{:key (gensym "suggestion-")}
     (render-suggestion result))])


(defn component []
  (fn []
    [:section.search-bar-wrapper
     [search-bar]]))
