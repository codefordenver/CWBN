{:rename-macros {}, :renames {}, :externs {Error {}, Object {}}, :use-macros {defexamples dynadoc.example, go cljs.core.async.macros, walk clojure.walk}, :excludes #{}, :name eval-soup.core, :imports {XhrIo goog.net.XhrIo}, :requires {str clojure.string, clojure.string clojure.string, cljs.core.async cljs.core.async, cljs.js cljs.js, cljs.tools.reader cljs.tools.reader, clojure.walk clojure.walk, XhrIo goog.net.XhrIo}, :cljs.spec/speced-vars [], :uses {eval cljs.js, chan cljs.core.async, walk clojure.walk, empty-state cljs.js, read-string cljs.tools.reader, js-eval cljs.js, put! cljs.core.async}, :defs {add-timeouts-if-necessary {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 101, :column 17, :end-line 101, :end-column 42, :private true, :arglists (quote ([timeout forms expanded-forms]))}, :private true, :name eval-soup.core/add-timeouts-if-necessary, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 42, :method-params ([timeout forms expanded-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists (quote ([timeout forms expanded-forms]))}, add-timeout-reset {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 90, :column 17, :end-line 90, :end-column 34, :private true, :arglists (quote ([form]))}, :private true, :name eval-soup.core/add-timeout-reset, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 34, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, add-timeout-checks {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 93, :column 17, :end-line 93, :end-column 35, :private true, :arglists (quote ([timeout form]))}, :private true, :name eval-soup.core/add-timeout-checks, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 35, :method-params ([timeout form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([timeout form]))}, eval-forms {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 56, :column 17, :end-line 56, :end-column 27, :private true, :arglists (quote ([forms cb *state *current-ns custom-load]))}, :private true, :name eval-soup.core/eval-forms, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 27, :method-params ([forms cb *state *current-ns custom-load]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 5, :fn-var true, :arglists (quote ([forms cb *state *current-ns custom-load]))}, code->results {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 111, :column 7, :end-line 111, :end-column 20, :arglists (quote ([forms cb] [forms cb {:keys [*current-ns *state custom-load timeout disable-timeout?], :or {*current-ns (atom (quote cljs.user)), *state *cljs-state, custom-load custom-load!, timeout 4000, disable-timeout? false}, :as opts}])), :doc "Evaluates each form, providing the results in a callback.\n  If any of the forms are strings, it will read them first.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms cb] [forms cb {:keys [*current-ns *state custom-load timeout disable-timeout?], :or {*current-ns (atom (quote cljs.user)), *state *cljs-state, custom-load custom-load!, timeout 4000, disable-timeout? false}, :as opts}]), :arglists ([forms cb] [forms cb {:keys [*current-ns *state custom-load timeout disable-timeout?], :or {*current-ns (atom (quote cljs.user)), *state *cljs-state, custom-load custom-load!, timeout 4000, disable-timeout? false}, :as opts}]), :arglists-meta (nil nil)}}, :name eval-soup.core/code->results, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms cb] [forms cb {:keys [*current-ns *state custom-load timeout disable-timeout?], :or {*current-ns (atom (quote cljs.user)), *state *cljs-state, custom-load custom-load!, timeout 4000, disable-timeout? false}, :as opts}]), :arglists ([forms cb] [forms cb {:keys [*current-ns *state custom-load timeout disable-timeout?], :or {*current-ns (atom (quote cljs.user)), *state *cljs-state, custom-load custom-load!, timeout 4000, disable-timeout? false}, :as opts}]), :arglists-meta (nil nil)}, :method-params ([forms cb] [forms cb {:keys [*current-ns *state custom-load timeout disable-timeout?], :or {*current-ns (atom (quote cljs.user)), *state *cljs-state, custom-load custom-load!, timeout 4000, disable-timeout? false}, :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 3, :fn-var true, :arglists ([forms cb] [forms cb {:keys [*current-ns *state custom-load timeout disable-timeout?], :or {*current-ns (atom (quote cljs.user)), *state *cljs-state, custom-load custom-load!, timeout 4000, disable-timeout? false}, :as opts}]), :doc "Evaluates each form, providing the results in a callback.\n  If any of the forms are strings, it will read them first."}, *cljs-state {:name eval-soup.core/*cljs-state, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 109, :column 1, :end-line 109, :end-column 31, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 109, :column 20, :end-line 109, :end-column 31, :private true}, :tag any}, custom-load! {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 23, :column 17, :end-line 23, :end-column 29, :private true, :arglists (quote ([opts cb] [opts extensions cb])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([opts cb] [opts extensions cb]), :arglists ([opts cb] [opts extensions cb]), :arglists-meta (nil nil)}}, :private true, :name eval-soup.core/custom-load!, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([opts cb] [opts extensions cb]), :arglists ([opts cb] [opts extensions cb]), :arglists-meta (nil nil)}, :method-params ([opts cb] [opts extensions cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists ([opts cb] [opts extensions cb])}, fix-goog-path {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 11, :column 17, :end-line 11, :end-column 30, :private true, :arglists (quote ([path]))}, :private true, :name eval-soup.core/fix-goog-path, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 30, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, str->form {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 50, :column 17, :end-line 50, :end-column 26, :private true, :arglists (quote ([ns-sym s]))}, :private true, :name eval-soup.core/str->form, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 26, :method-params ([ns-sym s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ns-sym s]))}, wrap-macroexpand {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :line 85, :column 17, :end-line 85, :end-column 33, :private true, :arglists (quote ([form]))}, :private true, :name eval-soup.core/wrap-macroexpand, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\eval_soup\\core.cljs", :end-column 33, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros, dynadoc.example dynadoc.example, cljs.js cljs.js}, :cljs.analyzer/constants {:seen #{macroexpand :load :path timeout *print-err-fn* atom :js ps-last-time :*state :else cljs.user/ps-reset-timeout! js/Date. :macros :ns :def-emits-var :disable-timeout? :value fn :read-cond :recur :custom-load do ps-check-for-timeout! when > :source _ defn :allow ns .getTime :*current-ns - :lang reset! :expr recur js/Error. clojure.core/deref cljs.user/ps-check-for-timeout! :context :error set! quote :timeout ps-reset-timeout! :clj throw def cljs.user :eval}, :order [:path :macros :else :lang :source :js :clj :read-cond :allow :eval :load :context :def-emits-var :expr :recur :value :error :ns ns macroexpand quote do cljs.user/ps-reset-timeout! recur cljs.user/ps-check-for-timeout! :*current-ns cljs.user :*state :custom-load :timeout :disable-timeout? def ps-last-time atom defn ps-reset-timeout! reset! .getTime js/Date. ps-check-for-timeout! timeout when > - clojure.core/deref throw js/Error. set! *print-err-fn* fn _]}, :doc nil}