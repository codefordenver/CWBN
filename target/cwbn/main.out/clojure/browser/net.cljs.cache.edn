{:rename-macros {}, :renames {}, :externs {Error {}, document {body {}}, window {location {href {}}}}, :use-macros {}, :excludes #{}, :name clojure.browser.net, :imports {XhrIo goog.net.XhrIo, EventType goog.net.EventType, WebSocket goog.net.WebSocket, CfgFields goog.net.xpc.CfgFields, CrossPageChannel goog.net.xpc.CrossPageChannel, Uri goog.Uri}, :requires {Uri goog.Uri, WebSocket goog.net.WebSocket, EventType goog.net.EventType, goog.json goog.json, gobj goog.object, goog.object goog.object, CfgFields goog.net.xpc.CfgFields, gjson goog.json, XhrIo goog.net.XhrIo, event clojure.browser.event, CrossPageChannel goog.net.xpc.CrossPageChannel, clojure.browser.event clojure.browser.event}, :cljs.spec/speced-vars [], :uses nil, :defs {xpc-config-fields {:name clojure.browser.net/xpc-config-fields, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 74, :column 1, :end-line 74, :end-column 23, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 74, :column 6, :end-line 74, :end-column 23}, :tag any}, xhr-connection {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 82, :column 7, :end-line 82, :end-column 21, :arglists (quote ([])), :doc "Returns an XhrIo connection"}, :name clojure.browser.net/xhr-connection, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns an XhrIo connection"}, xpc-connection {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 117, :column 7, :end-line 117, :end-column 21, :arglists (quote ([] [config])), :doc "When passed with a config hash-map, returns a parent\n  CrossPageChannel object. Keys in the config hash map are downcased\n  versions of the goog.net.xpc.CfgFields enum keys,\n  e.g. goog.net.xpc.CfgFields.PEER_URI becomes :peer_uri in the config\n  hash.\n\n  When passed with no args, creates a child CrossPageChannel object,\n  and the config is automatically taken from the URL param 'xpc', as\n  per the CrossPageChannel API.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [config]), :arglists ([] [config]), :arglists-meta (nil nil)}}, :name clojure.browser.net/xpc-connection, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [config]), :arglists ([] [config]), :arglists-meta (nil nil)}, :method-params ([] [config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists ([] [config]), :doc "When passed with a config hash-map, returns a parent\n  CrossPageChannel object. Keys in the config hash map are downcased\n  versions of the goog.net.xpc.CfgFields enum keys,\n  e.g. goog.net.xpc.CfgFields.PEER_URI becomes :peer_uri in the config\n  hash.\n\n  When passed with no args, creates a child CrossPageChannel object,\n  and the config is automatically taken from the URL param 'xpc', as\n  per the CrossPageChannel API."}, ICrossPageChannel {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 87, :column 14, :end-line 87, :end-column 31, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {register-service [[this service-name fn] [this service-name fn encode-json?]]}}}, :protocol-symbol true, :name clojure.browser.net/ICrossPageChannel, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 31, :column 1, :line 87, :protocol-info {:methods {register-service [[this service-name fn] [this service-name fn encode-json?]]}}, :info nil, :end-line 87, :tag any, :impls #{goog/net.xpc.CrossPageChannel}, :doc nil, :jsdoc ("@interface")}, IWebSocket {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 144, :column 14, :end-line 144, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {open? [[this]]}}}, :protocol-symbol true, :name clojure.browser.net/IWebSocket, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 24, :column 1, :line 144, :protocol-info {:methods {open? [[this]]}}, :info nil, :end-line 144, :tag any, :impls #{goog/net.WebSocket}, :doc nil, :jsdoc ("@interface")}, *timeout* {:name clojure.browser.net/*timeout*, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 20, :column 1, :end-line 20, :end-column 15, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 20, :column 6, :end-line 20, :end-column 15}, :tag number}, connect {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 32, :column 4, :end-line 32, :end-column 11, :protocol clojure.browser.net/IConnection, :doc nil, :arglists (quote ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]), :arglists ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]), :arglists-meta (nil nil nil nil)}}, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/connect, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]), :arglists ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]), :arglists-meta (nil nil nil nil)}, :method-params ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 31, :end-line 32, :max-fixed-arity 4, :fn-var true, :arglists ([this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]), :doc nil}, event-types {:name clojure.browser.net/event-types, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 22, :column 1, :end-line 22, :end-column 17, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 22, :column 6, :end-line 22, :end-column 17}, :tag any}, websocket-connection {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 175, :column 7, :end-line 175, :end-column 27, :arglists (quote ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :arglists ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :arglists-meta (nil nil nil)}}, :name clojure.browser.net/websocket-connection, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :arglists ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :arglists-meta (nil nil nil)}, :method-params ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists ([] [auto-reconnect?] [auto-reconnect? next-reconnect-fn])}, close {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 43, :column 4, :end-line 43, :end-column 9, :protocol clojure.browser.net/IConnection, :doc nil, :arglists (quote ([this]))}, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/close, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, register-service {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 88, :column 4, :end-line 88, :end-column 20, :protocol clojure.browser.net/ICrossPageChannel, :doc nil, :arglists (quote ([this service-name fn] [this service-name fn encode-json?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this service-name fn] [this service-name fn encode-json?]), :arglists ([this service-name fn] [this service-name fn encode-json?]), :arglists-meta (nil nil)}}, :protocol clojure.browser.net/ICrossPageChannel, :name clojure.browser.net/register-service, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([this service-name fn] [this service-name fn encode-json?]), :arglists ([this service-name fn] [this service-name fn encode-json?]), :arglists-meta (nil nil)}, :method-params ([this service-name fn] [this service-name fn encode-json?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 88, :max-fixed-arity 4, :fn-var true, :arglists ([this service-name fn] [this service-name fn encode-json?]), :doc nil}, IConnection {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 31, :column 14, :end-line 31, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {connect [[this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]], transmit [[this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]], close [[this]]}}}, :protocol-symbol true, :name clojure.browser.net/IConnection, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 25, :column 1, :line 31, :protocol-info {:methods {connect [[this] [this opt1] [this opt1 opt2] [this opt1 opt2 opt3]], transmit [[this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]], close [[this]]}}, :info nil, :end-line 31, :tag any, :impls #{goog/net.xpc.CrossPageChannel goog/net.WebSocket goog/net.XhrIo}, :doc nil, :jsdoc ("@interface")}, open? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 145, :column 4, :end-line 145, :end-column 9, :protocol clojure.browser.net/IWebSocket, :doc nil, :arglists (quote ([this]))}, :protocol clojure.browser.net/IWebSocket, :name clojure.browser.net/open?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, transmit {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :line 37, :column 4, :end-line 37, :end-column 12, :protocol clojure.browser.net/IConnection, :doc nil, :arglists (quote ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]), :arglists ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]), :arglists-meta (nil nil nil nil nil)}}, :protocol clojure.browser.net/IConnection, :name clojure.browser.net/transmit, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\browser\\net.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]), :arglists ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]), :arglists-meta (nil nil nil nil nil)}, :method-params ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 31, :end-line 37, :max-fixed-arity 6, :fn-var true, :arglists ([this opt] [this opt opt2] [this opt opt2 opt3] [this opt opt2 opt3 opt4] [this opt opt2 opt3 opt4 opt5]), :doc nil}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Network communication library, wrapping goog.net.\nIncludes a common API over XhrIo, CrossPageChannel, and Websockets."}