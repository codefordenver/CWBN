{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clojure.test.check.properties, :imports nil, :requires {gen clojure.test.check.generators, clojure.test.check.generators clojure.test.check.generators}, :cljs.spec/speced-vars [], :uses nil, :defs {apply-gen {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :line 13, :column 8, :end-line 13, :end-column 17, :private true, :arglists (quote ([function]))}, :private true, :name clojure.test.check.properties/apply-gen, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :end-column 17, :method-params ([function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([function]))}, for-all* {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([args function])), :doc "Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "}, :name clojure.test.check.properties/for-all*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :end-column 15, :method-params ([args function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([args function])), :doc "Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "}, binding-vars {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :line 38, :column 8, :end-line 38, :end-column 20, :private true, :arglists (quote ([bindings]))}, :private true, :name clojure.test.check.properties/binding-vars, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :end-column 20, :method-params ([bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bindings]))}, binding-gens {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :line 42, :column 8, :end-line 42, :end-column 20, :private true, :arglists (quote ([bindings]))}, :private true, :name clojure.test.check.properties/binding-gens, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :end-column 20, :method-params ([bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bindings]))}, for-all {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :line 46, :column 11, :end-line 46, :end-column 18, :macro true, :arglists (quote ([bindings & body])), :doc "Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  ", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name clojure.test.check.properties/for-all, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\properties.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :macro true, :end-line 46, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  "}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:args clojure.test.check.properties/for-all* :function :result cljs.core/fn}, :order [:result :function :args clojure.test.check.properties/for-all* cljs.core/fn]}, :doc nil}