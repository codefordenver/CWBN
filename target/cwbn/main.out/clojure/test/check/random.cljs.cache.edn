{:rename-macros {}, :renames {}, :externs {Date {prototype {valueOf {}}}, Error {}}, :use-macros {}, :excludes #{bit-count bit-xor unsigned-bit-shift-right * bit-or +}, :name clojure.test.check.random, :imports nil, :requires {doubles clojure.test.check.random.doubles, clojure.test.check.random.doubles clojure.test.check.random.doubles, longs clojure.test.check.random.longs, clojure.test.check.random.longs clojure.test.check.random.longs}, :cljs.spec/speced-vars [], :uses {bit-count clojure.test.check.random.longs, bit-xor clojure.test.check.random.longs, unsigned-bit-shift-right clojure.test.check.random.longs, * clojure.test.check.random.longs, bit-or clojure.test.check.random.longs, + clojure.test.check.random.longs}, :defs {mix-gamma-const-1 {:name clojure.test.check.random/mix-gamma-const-1, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 71, :column 1, :end-line 71, :end-column 33, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 71, :column 16, :end-line 71, :end-column 33, :private true}, :tag any}, make-java-util-splittable-random {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 123, :column 7, :end-line 123, :end-column 39, :arglists (quote ([seed]))}, :name clojure.test.check.random/make-java-util-splittable-random, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 39, :method-params ([seed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seed]))}, rand-long {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 20, :column 4, :end-line 20, :end-column 13, :protocol clojure.test.check.random/IRandom, :doc "Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument", :arglists (quote ([rng]))}, :protocol clojure.test.check.random/IRandom, :name clojure.test.check.random/rand-long, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 13, :method-params ([rng]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rng])), :doc "Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"}, mix-64 {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 62, :column 17, :end-line 62, :end-column 23, :private true, :arglists (quote ([n]))}, :private true, :name clojure.test.check.random/mix-64, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 23, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, golden-gamma {:name clojure.test.check.random/golden-gamma, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 120, :column 1, :end-line 120, :end-column 28, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 120, :column 16, :end-line 120, :end-column 28, :private true}, :tag any}, mix-gamma-const-2 {:name clojure.test.check.random/mix-gamma-const-2, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 72, :column 1, :end-line 72, :end-column 33, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 72, :column 16, :end-line 72, :end-column 33, :private true}, :tag any}, mix-64-const-2 {:name clojure.test.check.random/mix-64-const-2, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 60, :column 1, :end-line 60, :end-column 30, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 60, :column 16, :end-line 60, :end-column 30, :private true}, :tag any}, bxoubsr {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 54, :column 17, :end-line 54, :end-column 24, :private true, :arglists (quote ([x n])), :doc "Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."}, :private true, :name clojure.test.check.random/bxoubsr, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 24, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n])), :doc "Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."}, make-random {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 140, :column 7, :end-line 140, :end-column 18, :arglists (quote ([] [seed])), :doc "Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [seed]), :arglists ([] [seed]), :arglists-meta (nil nil)}}, :name clojure.test.check.random/make-random, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [seed]), :arglists ([] [seed]), :arglists-meta (nil nil)}, :method-params ([] [seed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists ([] [seed]), :doc "Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."}, mix-gamma {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 75, :column 17, :end-line 75, :end-column 26, :private true, :arglists (quote ([n]))}, :private true, :name clojure.test.check.random/mix-gamma, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 26, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, mix-gamma-const-3 {:name clojure.test.check.random/mix-gamma-const-3, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 73, :column 1, :end-line 73, :end-column 33, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 73, :column 16, :end-line 73, :end-column 33, :private true}, :tag any}, split-n {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 37, :column 4, :end-line 37, :end-column 11, :protocol clojure.test.check.random/IRandom, :doc "Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument", :arglists (quote ([rng n]))}, :protocol clojure.test.check.random/IRandom, :name clojure.test.check.random/split-n, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 11, :method-params ([rng n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rng n])), :doc "Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"}, next-rng {:name clojure.test.check.random/next-rng, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 130, :column 1, :end-line 130, :end-column 24, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 130, :column 16, :end-line 130, :end-column 24, :private true}, :tag function}, hex-long {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 49, :column 17, :end-line 49, :end-column 25, :private true, :arglists (quote ([s])), :doc "Helper for defining constants."}, :private true, :name clojure.test.check.random/hex-long, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Helper for defining constants."}, rand-double {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 25, :column 4, :end-line 25, :end-column 15, :protocol clojure.test.check.random/IRandom, :doc "Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument", :arglists (quote ([rng]))}, :protocol clojure.test.check.random/IRandom, :name clojure.test.check.random/rand-double, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 15, :method-params ([rng]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rng])), :doc "Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"}, mix-64-const-1 {:name clojure.test.check.random/mix-64-const-1, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 59, :column 1, :end-line 59, :end-column 30, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 59, :column 16, :end-line 59, :end-column 30, :private true}, :tag any}, split {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 31, :column 4, :end-line 31, :end-column 9, :protocol clojure.test.check.random/IRandom, :doc "Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument", :arglists (quote ([rng]))}, :protocol clojure.test.check.random/IRandom, :name clojure.test.check.random/split, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 9, :method-params ([rng]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rng])), :doc "Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"}, JavaUtilSplittableRandom {:num-fields 2, :protocols #{clojure.test.check.random/IRandom}, :name clojure.test.check.random/JavaUtilSplittableRandom, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 34, :type true, :column 10, :line 91, :record false, :end-line 91, :skip-protocol-flag nil}, IRandom {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {rand-long [[rng]], rand-double [[rng]], split [[rng]], split-n [[rng n]]}}}, :protocol-symbol true, :name clojure.test.check.random/IRandom, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 21, :column 1, :line 19, :protocol-info {:methods {rand-long [[rng]], rand-double [[rng]], split [[rng]], split-n [[rng n]]}}, :info nil, :end-line 19, :tag any, :impls #{clojure.test.check.random/JavaUtilSplittableRandom}, :doc nil, :jsdoc ("@interface")}, ->JavaUtilSplittableRandom {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :line 91, :column 10, :end-line 91, :end-column 34, :protocols #{clojure.test.check.random/IRandom}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([gamma state]))}, :protocols #{clojure.test.check.random/IRandom}, :name clojure.test.check.random/->JavaUtilSplittableRandom, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\lk\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random.cljs", :end-column 34, :method-params ([gamma state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([gamma state])), :skip-protocol-flag nil}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:returned :state :seed state gamma}, :order [gamma state :seed :state :returned]}, :doc "Purely functional and splittable pseudo-random number generators."}