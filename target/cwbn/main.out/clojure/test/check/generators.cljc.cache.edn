{:rename-macros {}, :renames {}, :externs {Error {}, Number {POSITIVE_INFINITY {}, NEGATIVE_INFINITY {}, MAX_VALUE {}, NaN {}}, Math {pow {}, LOG2E {}}}, :use-macros {}, :excludes #{uuid set namespace boolean map char shuffle let double int symbol sorted-set vector not-empty list keyword hash-map byte sequence bytes}, :name clojure.test.check.generators, :imports nil, :requires {core cljs.core, cljs.core cljs.core, random clojure.test.check.random, clojure.test.check.random clojure.test.check.random, rose clojure.test.check.rose-tree, clojure.test.check.rose-tree clojure.test.check.rose-tree, gstring goog.string, goog.string goog.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {coll-distinct-by* {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 540, :column 17, :end-line 540, :end-column 34, :private true, :arglists (quote ([empty-coll key-fn shuffle-fn gen rng size num-elements min-elements max-tries])), :doc "Returns a rose tree."}, :private true, :name clojure.test.check.generators/coll-distinct-by*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 34, :method-params ([empty-coll key-fn shuffle-fn gen rng size num-elements min-elements max-tries]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 540, :end-line 540, :max-fixed-arity 9, :fn-var true, :arglists (quote ([empty-coll key-fn shuffle-fn gen rng size num-elements min-elements max-tries])), :doc "Returns a rose tree."}, gen-fmap {:no-doc true, :protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 50, :column 7, :end-line 50, :end-column 15, :arglists (quote ([k {h :gen}])), :no-doc true}, :name clojure.test.check.generators/gen-fmap, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 15, :method-params ([k p__21058]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k {h :gen}]))}, uuid {:name clojure.test.check.generators/uuid, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1256, :column 1, :end-line 1256, :end-column 10, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1256, :column 6, :end-line 1256, :end-column 10}, :doc "Generates a random type-4 UUID. Does not shrink.", :tag any}, set {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 737, :column 7, :end-line 737, :end-column 10, :arglists (quote ([gen] [gen opts])), :doc "Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/set, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}, :method-params ([gen] [gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 737, :end-line 737, :max-fixed-arity 2, :fn-var true, :arglists ([gen] [gen opts]), :doc "Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)"}, one-of {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 264, :column 7, :end-line 264, :end-column 13, :arglists (quote ([generators])), :doc "Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n  Examples:\n\n      (one-of [gen/int gen/boolean (gen/vector gen/int)])\n\n  "}, :name clojure.test.check.generators/one-of, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 13, :method-params ([generators]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generators])), :doc "Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n  Examples:\n\n      (one-of [gen/int gen/boolean (gen/vector gen/int)])\n\n  "}, uniform-integer {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 904, :column 17, :end-line 904, :end-column 32, :private true, :arglists (quote ([bit-count])), :doc "Generates an integer uniformly in the range 0..(2^bit-count-1)."}, :private true, :name clojure.test.check.generators/uniform-integer, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 32, :method-params ([bit-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 904, :end-line 904, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bit-count])), :doc "Generates an integer uniformly in the range 0..(2^bit-count-1)."}, char-keyword-first {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1146, :column 23, :end-line 1146, :end-column 41, :private true}, :private true, :name clojure.test.check.generators/char-keyword-first, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 41, :column 1, :line 1146, :end-line 1146, :tag any, :doc "Generate characters that can be the first char of a keyword."}, any-printable {:name clojure.test.check.generators/any-printable, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1345, :column 1, :end-line 1345, :end-column 19, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1345, :column 6, :end-line 1345, :end-column 19}, :doc "Like any, but avoids characters that the shell will interpret as actions,\n  like 7 and 14 (bell and alternate character set command)", :tag any}, char-keyword-rest {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1141, :column 23, :end-line 1141, :end-column 40, :private true}, :private true, :name clojure.test.check.generators/char-keyword-rest, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 40, :column 1, :line 1141, :end-line 1141, :tag any, :doc "Generate characters that can be the char following first of a keyword."}, large-integer** {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 835, :column 17, :end-line 835, :end-column 32, :private true, :arglists (quote ([min max])), :doc "Like large-integer*, but assumes range includes zero."}, :private true, :name clojure.test.check.generators/large-integer**, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 32, :method-params ([min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 835, :end-line 835, :max-fixed-arity 2, :fn-var true, :arglists (quote ([min max])), :doc "Like large-integer*, but assumes range includes zero."}, MIN_NEG_VALUE {:name clojure.test.check.generators/MIN_NEG_VALUE, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 901, :column 1, :end-line 901, :end-column 29, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 901, :column 16, :end-line 901, :end-column 29, :private true}, :tag number}, calc-long {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 187, :column 8, :end-line 187, :end-column 17, :private true, :arglists (quote ([factor lower upper]))}, :private true, :name clojure.test.check.generators/calc-long, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 17, :method-params ([factor lower upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 3, :fn-var true, :arglists (quote ([factor lower upper]))}, vector-distinct {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 657, :column 7, :end-line 657, :end-column 22, :arglists (quote ([gen] [gen opts])), :doc "Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/vector-distinct, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}, :method-params ([gen] [gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 2, :fn-var true, :arglists ([gen] [gen opts]), :doc "Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)"}, double-exp-and-sign {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 971, :column 17, :end-line 971, :end-column 36, :private true, :arglists (quote ([lower-bound upper-bound])), :doc "Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds."}, :private true, :name clojure.test.check.generators/double-exp-and-sign, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 36, :method-params ([lower-bound upper-bound]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 971, :end-line 971, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lower-bound upper-bound])), :doc "Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds."}, MIN_INTEGER {:name clojure.test.check.generators/MIN_INTEGER, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 807, :column 1, :end-line 807, :end-column 27, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 807, :column 16, :end-line 807, :end-column 27, :private true}, :tag number}, namespace {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1192, :column 23, :end-line 1192, :end-column 32, :private true}, :private true, :name clojure.test.check.generators/namespace, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 32, :column 1, :line 1192, :end-line 1192, :tag any, :doc "Generate a namespace (or nil for no namespace)."}, boolean {:name clojure.test.check.generators/boolean, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 380, :column 1, :end-line 380, :end-column 13, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 380, :column 6, :end-line 380, :end-column 13}, :doc "Generates one of `true` or `false`. Shrinks to `false`.", :tag any}, list-distinct {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 677, :column 7, :end-line 677, :end-column 20, :arglists (quote ([gen] [gen opts])), :doc "Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/list-distinct, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}, :method-params ([gen] [gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 677, :end-line 677, :max-fixed-arity 2, :fn-var true, :arglists ([gen] [gen opts]), :doc "Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)"}, string-alphanumeric {:name clojure.test.check.generators/string-alphanumeric, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1159, :column 1, :end-line 1159, :end-column 25, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1159, :column 6, :end-line 1159, :end-column 25}, :doc "Generate alphanumeric strings.", :tag any}, map {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 775, :column 7, :end-line 775, :end-column 10, :arglists (quote ([key-gen val-gen] [key-gen val-gen opts])), :doc "Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-gen val-gen] [key-gen val-gen opts]), :arglists ([key-gen val-gen] [key-gen val-gen opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/map, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-gen val-gen] [key-gen val-gen opts]), :arglists ([key-gen val-gen] [key-gen val-gen opts]), :arglists-meta (nil nil)}, :method-params ([key-gen val-gen] [key-gen val-gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 775, :end-line 775, :max-fixed-arity 3, :fn-var true, :arglists ([key-gen val-gen] [key-gen val-gen opts]), :doc "Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)"}, keyword-segment-rest {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1198, :column 23, :end-line 1198, :end-column 43, :private true}, :private true, :name clojure.test.check.generators/keyword-segment-rest, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 43, :column 1, :line 1198, :end-line 1198, :tag any, :doc "Generate segments of a keyword (between \\:)"}, simple-type {:name clojure.test.check.generators/simple-type, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1291, :column 1, :end-line 1291, :end-column 17, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1291, :column 6, :end-line 1291, :end-column 17}, :tag any}, char {:name clojure.test.check.generators/char, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1109, :column 1, :end-line 1109, :end-column 10, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1109, :column 6, :end-line 1109, :end-column 10}, :doc "Generates character from 0-255.", :tag any}, pos-int {:name clojure.test.check.generators/pos-int, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 413, :column 1, :end-line 413, :end-column 13, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 413, :column 6, :end-line 413, :end-column 13}, :doc "Generate positive integers bounded by the generator's `size` parameter.", :tag any}, bind {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 108, :column 7, :end-line 108, :end-column 11, :arglists (quote ([generator k])), :doc "Create a new generator that passes the result of `gen` into function\n  `k`. `k` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator which first generates a vector of integers, and\n  then chooses a random element from that vector:\n\n      (gen/bind (gen/such-that not-empty (gen/vector gen/int))\n                ;; this function takes a realized vector,\n                ;; and then returns a new generator which\n                ;; chooses a random element from it\n                gen/elements)\n\n  "}, :name clojure.test.check.generators/bind, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 11, :method-params ([generator k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([generator k])), :doc "Create a new generator that passes the result of `gen` into function\n  `k`. `k` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator which first generates a vector of integers, and\n  then chooses a random element from that vector:\n\n      (gen/bind (gen/such-that not-empty (gen/vector gen/int))\n                ;; this function takes a realized vector,\n                ;; and then returns a new generator which\n                ;; chooses a random element from it\n                gen/elements)\n\n  "}, symbol-ns {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1241, :column 3, :end-line 1241, :end-column 12, :added "0.5.9"}, :added "0.5.9", :name clojure.test.check.generators/symbol-ns, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 12, :column 1, :line 1239, :end-line 1241, :tag any, :doc "Generate symbols with optional namespaces."}, any {:name clojure.test.check.generators/any, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1341, :column 1, :end-line 1341, :end-column 9, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1341, :column 6, :end-line 1341, :end-column 9}, :doc "A recursive generator that will generate many different, often nested, values", :tag any}, shuffle {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 484, :column 3, :end-line 484, :end-column 10, :added "0.6.0", :arglists (quote ([coll])), :doc "Create a generator that generates random permutations of `coll`. Shrinks\n  toward the original collection: `coll`. `coll` will be turned into a vector,\n  if it's not already."}, :added "0.6.0", :name clojure.test.check.generators/shuffle, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 10, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 482, :end-line 484, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Create a generator that generates random permutations of `coll`. Shrinks\n  toward the original collection: `coll`. `coll` will be turned into a vector,\n  if it's not already."}, container-type {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1299, :column 7, :end-line 1299, :end-column 21, :arglists (quote ([inner-type]))}, :name clojure.test.check.generators/container-type, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 21, :method-params ([inner-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1299, :end-line 1299, :max-fixed-arity 1, :fn-var true, :arglists (quote ([inner-type]))}, char-symbol-rest {:name clojure.test.check.generators/char-symbol-rest, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1227, :column 1, :end-line 1227, :end-column 39, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1227, :column 23, :end-line 1227, :end-column 39, :private true}, :tag any}, long->large-integer {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 814, :column 17, :end-line 814, :end-column 36, :private true, :arglists (quote ([bit-count x min max]))}, :private true, :name clojure.test.check.generators/long->large-integer, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 36, :method-params ([bit-count x min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 814, :end-line 814, :max-fixed-arity 4, :fn-var true, :arglists (quote ([bit-count x min max]))}, s-pos-int {:name clojure.test.check.generators/s-pos-int, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 421, :column 1, :end-line 421, :end-column 15, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 421, :column 6, :end-line 421, :end-column 15}, :doc "Generate strictly positive integers bounded by the generator's `size`\n   parameter.", :tag any}, get-exponent {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 953, :column 17, :end-line 953, :end-column 29, :private true, :arglists (quote ([x]))}, :private true, :name clojure.test.check.generators/get-exponent, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 953, :end-line 953, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, let {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1354, :column 11, :end-line 1354, :end-column 14, :macro true, :arglists (quote ([bindings & body])), :doc "Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; generates collections of \"users\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name clojure.test.check.generators/let, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1354, :macro true, :end-line 1354, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; generates collections of \"users\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))"}, gen-seq->seq-gen {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 76, :column 8, :end-line 76, :end-column 24, :private true, :arglists (quote ([gens])), :doc "Takes a sequence of generators and returns a generator of sequences (er, vectors)."}, :private true, :name clojure.test.check.generators/gen-seq->seq-gen, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 24, :method-params ([gens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gens])), :doc "Takes a sequence of generators and returns a generator of sequences (er, vectors)."}, double {:name clojure.test.check.generators/double, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1100, :column 1, :end-line 1100, :end-column 12, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1100, :column 6, :end-line 1100, :end-column 12}, :doc "Generates 64-bit floating point numbers from the entire range,\n  including +/- infinity and NaN. Use double* for more control.", :tag any}, MAX_POS_VALUE {:name clojure.test.check.generators/MAX_POS_VALUE, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 900, :column 1, :end-line 900, :end-column 29, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 900, :column 16, :end-line 900, :end-column 29, :private true}, :tag js}, list-distinct-by {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 717, :column 7, :end-line 717, :end-column 23, :arglists (quote ([key-fn gen] [key-fn gen opts])), :doc "Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-fn gen] [key-fn gen opts]), :arglists ([key-fn gen] [key-fn gen opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/list-distinct-by, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-fn gen] [key-fn gen opts]), :arglists ([key-fn gen] [key-fn gen opts]), :arglists-meta (nil nil)}, :method-params ([key-fn gen] [key-fn gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 717, :end-line 717, :max-fixed-arity 3, :fn-var true, :arglists ([key-fn gen] [key-fn gen opts]), :doc "Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)"}, block-bounds {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1013, :column 17, :end-line 1013, :end-column 29, :private true, :arglists (quote ([exp sign])), :doc "Returns [low high], the smallest and largest numbers in the given\n  range."}, :private true, :name clojure.test.check.generators/block-bounds, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 29, :method-params ([exp sign]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1013, :end-line 1013, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exp sign])), :doc "Returns [low high], the smallest and largest numbers in the given\n  range."}, char-alpha {:name clojure.test.check.generators/char-alpha, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1131, :column 1, :end-line 1131, :end-column 16, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1131, :column 6, :end-line 1131, :end-column 16}, :doc "Generate alpha characters.", :tag any}, generator? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 29, :column 7, :end-line 29, :end-column 17, :arglists (quote ([x])), :doc "Test if `x` is a generator. Generators should be treated as opaque values."}, :name clojure.test.check.generators/generator?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Test if `x` is a generator. Generators should be treated as opaque values."}, char-symbol-special {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1137, :column 23, :end-line 1137, :end-column 42, :private true}, :private true, :name clojure.test.check.generators/char-symbol-special, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 42, :column 1, :line 1137, :end-line 1137, :tag any, :doc "Generate non-alphanumeric characters that can be in a symbol."}, sample-seq {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 134, :column 7, :end-line 134, :end-column 17, :arglists (quote ([generator] [generator max-size])), :doc "Return a sequence of realized values from `generator`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator max-size]), :arglists ([generator] [generator max-size]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/sample-seq, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator max-size]), :arglists ([generator] [generator max-size]), :arglists-meta (nil nil)}, :method-params ([generator] [generator max-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 2, :fn-var true, :arglists ([generator] [generator max-size]), :doc "Return a sequence of realized values from `generator`."}, int {:name clojure.test.check.generators/int, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 403, :column 1, :end-line 403, :end-column 9, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 403, :column 6, :end-line 403, :end-column 9}, :doc "Generates a positive or negative integer bounded by the generator's\n  `size` parameter.\n  (Really returns a long)", :tag any}, gen-pure {:no-doc true, :protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 43, :column 7, :end-line 43, :end-column 15, :arglists (quote ([value])), :no-doc true}, :name clojure.test.check.generators/gen-pure, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 15, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, recursive-gen {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1317, :column 3, :end-line 1317, :end-column 16, :added "0.5.9", :arglists (quote ([container-gen-fn scalar-gen])), :doc "This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n  "}, :added "0.5.9", :name clojure.test.check.generators/recursive-gen, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 16, :method-params ([container-gen-fn scalar-gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1315, :end-line 1317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([container-gen-fn scalar-gen])), :doc "This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n  "}, char-alpha-numeric {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1125, :column 3, :end-line 1125, :end-column 21, :deprecated "0.6.0"}, :name clojure.test.check.generators/char-alpha-numeric, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 21, :column 1, :line 1124, :deprecated "0.6.0", :end-line 1125, :tag any, :doc "Deprecated - use char-alphanumeric instead.\n\n  Generate alphanumeric characters."}, backwards-shrinking-significand {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 944, :column 16, :end-line 944, :end-column 47, :private true}, :private true, :name clojure.test.check.generators/backwards-shrinking-significand, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 47, :column 1, :line 944, :end-line 944, :tag any, :doc "Generates a 52-bit non-negative integer that shrinks toward having\n  fewer lower-order bits (and shrinks to 0 if possible)."}, return {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 92, :column 7, :end-line 92, :end-column 13, :arglists (quote ([value])), :doc "Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators."}, :name clojure.test.check.generators/return, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 13, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators."}, gen-bind {:no-doc true, :protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 57, :column 7, :end-line 57, :end-column 15, :arglists (quote ([{h :gen} k])), :no-doc true}, :name clojure.test.check.generators/gen-bind, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 15, :method-params ([p__21061 k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{h :gen} k]))}, scale {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 235, :column 7, :end-line 235, :end-column 12, :arglists (quote ([f generator])), :doc "Create a new generator that modifies the size parameter by the given function. Intended to\n   support generators with sizes that need to grow at different rates compared to the normal\n   linear scaling."}, :name clojure.test.check.generators/scale, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 12, :method-params ([f generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f generator])), :doc "Create a new generator that modifies the size parameter by the given function. Intended to\n   support generators with sizes that need to grow at different rates compared to the normal\n   linear scaling."}, +-or---digit? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1175, :column 8, :end-line 1175, :end-column 21, :private true, :arglists (quote ([c d])), :doc "Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."}, :private true, :name clojure.test.check.generators/+-or---digit?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 21, :method-params ([c d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1175, :end-line 1175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c d])), :doc "Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."}, symbol {:name clojure.test.check.generators/symbol, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1232, :column 1, :end-line 1232, :end-column 12, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1232, :column 6, :end-line 1232, :end-column 12}, :doc "Generate symbols without namespaces.", :tag any}, such-that-helper {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 317, :column 8, :end-line 317, :end-column 24, :private true, :arglists (quote ([max-tries pred gen tries-left rng size]))}, :private true, :name clojure.test.check.generators/such-that-helper, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 24, :method-params ([max-tries pred gen tries-left rng size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 6, :fn-var true, :arglists (quote ([max-tries pred gen tries-left rng size]))}, double-finite {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1025, :column 17, :end-line 1025, :end-column 30, :private true, :arglists (quote ([lower-bound upper-bound]))}, :private true, :name clojure.test.check.generators/double-finite, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 30, :method-params ([lower-bound upper-bound]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1025, :end-line 1025, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lower-bound upper-bound]))}, pick {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 280, :column 8, :end-line 280, :end-column 12, :private true, :arglists (quote ([[h & tail] n]))}, :private true, :name clojure.test.check.generators/pick, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 12, :method-params ([p__21094 n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[h & tail] n]))}, char-alphanumeric {:name clojure.test.check.generators/char-alphanumeric, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1117, :column 1, :end-line 1117, :end-column 23, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1117, :column 6, :end-line 1117, :end-column 23}, :doc "Generate alphanumeric characters.", :tag any}, make-size-range-seq {:no-doc true, :protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 129, :column 7, :end-line 129, :end-column 26, :arglists (quote ([max-size])), :no-doc true}, :name clojure.test.check.generators/make-size-range-seq, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 26, :method-params ([max-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max-size]))}, choose {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 242, :column 7, :end-line 242, :end-column 13, :arglists (quote ([lower upper])), :doc "Create a generator that returns numbers in the range\n     `lower` to `upper`, inclusive."}, :name clojure.test.check.generators/choose, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 13, :method-params ([lower upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lower upper])), :doc "Create a generator that returns numbers in the range\n     `lower` to `upper`, inclusive."}, string-ascii {:name clojure.test.check.generators/string-ascii, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1155, :column 1, :end-line 1155, :end-column 18, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1155, :column 6, :end-line 1155, :end-column 18}, :doc "Generate ascii strings.", :tag any}, sorted-set {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 756, :column 7, :end-line 756, :end-column 17, :arglists (quote ([gen] [gen opts])), :doc "Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/sorted-set, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen] [gen opts]), :arglists ([gen] [gen opts]), :arglists-meta (nil nil)}, :method-params ([gen] [gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 756, :end-line 756, :max-fixed-arity 2, :fn-var true, :arglists ([gen] [gen opts]), :doc "Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)"}, make-gen {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 34, :column 8, :end-line 34, :end-column 16, :private true, :arglists (quote ([generator-fn]))}, :private true, :name clojure.test.check.generators/make-gen, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 16, :method-params ([generator-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generator-fn]))}, Generator {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name clojure.test.check.generators/Generator, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 21, :type true, :column 12, :internal-ctor true, :line 27, :record true, :end-line 27, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, frequency {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 287, :column 7, :end-line 287, :end-column 16, :arglists (quote ([pairs])), :doc "Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods\n\n  Examples:\n\n      (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]])\n  "}, :name clojure.test.check.generators/frequency, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 16, :method-params ([pairs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pairs])), :doc "Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods\n\n  Examples:\n\n      (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]])\n  "}, double* {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1059, :column 7, :end-line 1059, :end-column 14, :arglists (quote ([{:keys [infinite? NaN? min max], :or {infinite? true, NaN? true}}])), :doc "Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity."}, :name clojure.test.check.generators/double*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 14, :method-params ([p__21240]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1059, :end-line 1059, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [infinite? NaN? min max], :or {infinite? true, NaN? true}}])), :doc "Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity."}, generate {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 154, :column 7, :end-line 154, :end-column 15, :arglists (quote ([generator] [generator size])), :doc "Returns a single sample value from the generator, using a default\n  size of 30.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator size]), :arglists ([generator] [generator size]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/generate, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator size]), :arglists ([generator] [generator size]), :arglists-meta (nil nil)}, :method-params ([generator] [generator size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists ([generator] [generator size]), :doc "Returns a single sample value from the generator, using a default\n  size of 30."}, distinct-by? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 587, :column 17, :end-line 587, :end-column 29, :private true, :arglists (quote ([f coll])), :doc "Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections."}, :private true, :name clojure.test.check.generators/distinct-by?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 29, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 587, :end-line 587, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections."}, sized {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 213, :column 7, :end-line 213, :end-column 12, :arglists (quote ([sized-gen])), :doc "Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator."}, :name clojure.test.check.generators/sized, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 12, :method-params ([sized-gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sized-gen])), :doc "Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator."}, s-neg-int {:name clojure.test.check.generators/s-neg-int, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 426, :column 1, :end-line 426, :end-column 15, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 426, :column 6, :end-line 426, :end-column 15}, :doc "Generate strictly negative integers bounded by the generator's `size`\n   parameter.", :tag any}, nat {:name clojure.test.check.generators/nat, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 409, :column 1, :end-line 409, :end-column 9, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 409, :column 6, :end-line 409, :end-column 9}, :doc "Generates natural numbers, starting at zero. Shrinks to zero.", :tag any}, coll-distinct-by {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 612, :column 17, :end-line 612, :end-column 33, :private true, :arglists (quote ([empty-coll key-fn allows-dupes? ordered? gen {:keys [num-elements min-elements max-elements max-tries], :or {max-tries 10}}]))}, :private true, :name clojure.test.check.generators/coll-distinct-by, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 33, :method-params ([empty-coll key-fn allows-dupes? ordered? gen p__21172]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 612, :end-line 612, :max-fixed-arity 6, :fn-var true, :arglists (quote ([empty-coll key-fn allows-dupes? ordered? gen {:keys [num-elements min-elements max-elements max-tries], :or {max-tries 10}}]))}, namespace-segment {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1186, :column 23, :end-line 1186, :end-column 40, :private true}, :private true, :name clojure.test.check.generators/namespace-segment, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 40, :column 1, :line 1186, :end-line 1186, :tag any, :doc "Generate the segment of a namespace."}, the-shuffle-fn {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 594, :column 17, :end-line 594, :end-column 31, :private true, :arglists (quote ([rng coll])), :doc "Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function."}, :private true, :name clojure.test.check.generators/the-shuffle-fn, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 31, :method-params ([rng coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 594, :end-line 594, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rng coll])), :doc "Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function."}, tuple {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 384, :column 7, :end-line 384, :end-column 12, :arglists (quote ([& generators])), :doc "Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))\n  ", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(generators)], :arglists ([& generators]), :arglists-meta (nil)}}, :name clojure.test.check.generators/tuple, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(generators)], :arglists ([& generators]), :arglists-meta (nil)}, :method-params [(generators)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 0, :fn-var true, :arglists ([& generators]), :doc "Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))\n  "}, lazy-random-states {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 67, :column 7, :end-line 67, :end-column 25, :arglists (quote ([rr])), :doc "Given a random number generator, returns an infinite lazy sequence\n  of random number generators."}, :name clojure.test.check.generators/lazy-random-states, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 25, :method-params ([rr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rr])), :doc "Given a random number generator, returns an infinite lazy sequence\n  of random number generators."}, map->Generator {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 27, :column 12, :end-line 27, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__21049]))}, :name clojure.test.check.generators/map->Generator, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 21, :method-params ([G__21049]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__21049]))}, shrink-2 {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 373, :column 7, :end-line 373, :end-column 15, :arglists (quote ([gen])), :doc "Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."}, :name clojure.test.check.generators/shrink-2, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 15, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 373, :end-line 373, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."}, string-alpha-numeric {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1164, :column 3, :end-line 1164, :end-column 23, :deprecated "0.6.0"}, :name clojure.test.check.generators/string-alpha-numeric, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 23, :column 1, :line 1163, :deprecated "0.6.0", :end-line 1164, :tag any, :doc "Deprecated - use string-alphanumeric instead.\n\n  Generate alphanumeric strings."}, resize {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 226, :column 7, :end-line 226, :end-column 13, :arglists (quote ([n generator])), :doc "Create a new generator with `size` always bound to `n`."}, :name clojure.test.check.generators/resize, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 13, :method-params ([n generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n generator])), :doc "Create a new generator with `size` always bound to `n`."}, digit? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1170, :column 8, :end-line 1170, :end-column 14, :private true, :arglists (quote ([d]))}, :private true, :name clojure.test.check.generators/digit?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 14, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1170, :end-line 1170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, scalb {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 923, :column 17, :end-line 923, :end-column 22, :private true, :arglists (quote ([x exp]))}, :private true, :name clojure.test.check.generators/scalb, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 22, :method-params ([x exp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 923, :end-line 923, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x exp]))}, neg-int {:name clojure.test.check.generators/neg-int, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 417, :column 1, :end-line 417, :end-column 13, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 417, :column 6, :end-line 417, :end-column 13}, :doc "Generate negative integers bounded by the generator's `size` parameter.", :tag any}, string {:name clojure.test.check.generators/string, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1151, :column 1, :end-line 1151, :end-column 12, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1151, :column 6, :end-line 1151, :end-column 12}, :doc "Generate strings. May generate unprintable characters.", :tag any}, vector {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 431, :column 7, :end-line 431, :end-column 13, :arglists (quote ([generator] [generator num-elements] [generator min-elements max-elements])), :doc "Create a generator whose elements are chosen from `gen`. The count of the\n  vector will be bounded by the `size` generator parameter.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists-meta (nil nil nil)}}, :name clojure.test.check.generators/vector, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :arglists-meta (nil nil nil)}, :method-params ([generator] [generator num-elements] [generator min-elements max-elements]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 431, :end-line 431, :max-fixed-arity 3, :fn-var true, :arglists ([generator] [generator num-elements] [generator min-elements max-elements]), :doc "Create a generator whose elements are chosen from `gen`. The count of the\n  vector will be bounded by the `size` generator parameter."}, large-integer {:name clojure.test.check.generators/large-integer, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 866, :column 1, :end-line 866, :end-column 19, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 866, :column 6, :end-line 866, :end-column 19}, :doc "Generates a platform-native integer from the full available range\n  (in clj, 64-bit Longs, and in cljs, numbers between -(2^53 - 1) and\n  (2^53 - 1)).\n\n  Use large-integer* for more control.", :tag any}, keyword-ns {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1216, :column 3, :end-line 1216, :end-column 13, :added "0.5.9"}, :added "0.5.9", :name clojure.test.check.generators/keyword-ns, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 13, :column 1, :line 1214, :end-line 1216, :tag any, :doc "Generate keywords with optional namespaces."}, not-empty {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 351, :column 7, :end-line 351, :end-column 16, :arglists (quote ([gen])), :doc "Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/not-empty (gen/vector gen/boolean))\n  "}, :name clojure.test.check.generators/not-empty, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 16, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/not-empty (gen/vector gen/boolean))\n  "}, char-symbol-first {:name clojure.test.check.generators/char-symbol-first, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1222, :column 1, :end-line 1222, :end-column 40, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1222, :column 23, :end-line 1222, :end-column 40, :private true}, :tag any}, gen-raw-long {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 800, :column 16, :end-line 800, :end-column 28, :private true}, :private true, :name clojure.test.check.generators/gen-raw-long, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 28, :column 1, :line 800, :end-line 800, :tag any, :doc "Generates a single uniformly random long, does not shrink."}, NAN {:name clojure.test.check.generators/NAN, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 902, :column 1, :end-line 902, :end-column 19, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 902, :column 16, :end-line 902, :end-column 19, :private true}, :tag js}, elements {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 304, :column 7, :end-line 304, :end-column 15, :arglists (quote ([coll])), :doc "Create a generator that randomly chooses an element from `coll`.\n\n  Examples:\n\n      (gen/elements [:foo :bar :baz])\n  "}, :name clojure.test.check.generators/elements, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Create a generator that randomly chooses an element from `coll`.\n\n  Examples:\n\n      (gen/elements [:foo :bar :baz])\n  "}, fifty-two-bit-reverse {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 928, :column 17, :end-line 928, :end-column 38, :private true, :arglists (quote ([n])), :doc "Bit-reverses an integer in the range [0, 2^52)."}, :private true, :name clojure.test.check.generators/fifty-two-bit-reverse, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 38, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 928, :end-line 928, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Bit-reverses an integer in the range [0, 2^52)."}, POS_INFINITY {:name clojure.test.check.generators/POS_INFINITY, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 898, :column 1, :end-line 898, :end-column 28, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 898, :column 16, :end-line 898, :end-column 28, :private true}, :tag js}, sample {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 144, :column 7, :end-line 144, :end-column 13, :arglists (quote ([generator] [generator num-samples])), :doc "Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator num-samples]), :arglists ([generator] [generator num-samples]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/sample, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([generator] [generator num-samples]), :arglists ([generator] [generator num-samples]), :arglists-meta (nil nil)}, :method-params ([generator] [generator num-samples]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists ([generator] [generator num-samples]), :doc "Return a sequence of `num-samples` (default 10)\n  realized values from `generator`."}, NEG_INFINITY {:name clojure.test.check.generators/NEG_INFINITY, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 899, :column 1, :end-line 899, :end-column 28, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 899, :column 16, :end-line 899, :end-column 28, :private true}, :tag js}, list {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 465, :column 7, :end-line 465, :end-column 11, :arglists (quote ([generator])), :doc "Like `vector`, but generates lists."}, :name clojure.test.check.generators/list, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 11, :method-params ([generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 465, :end-line 465, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generator])), :doc "Like `vector`, but generates lists."}, large-integer* {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 848, :column 7, :end-line 848, :end-column 21, :arglists (quote ([{:keys [min max]}])), :doc "Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional."}, :name clojure.test.check.generators/large-integer*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 21, :method-params ([p__21205]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 848, :end-line 848, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [min max]}])), :doc "Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional."}, abs {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 810, :column 17, :end-line 810, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name clojure.test.check.generators/abs, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 810, :end-line 810, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, keyword {:name clojure.test.check.generators/keyword, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1208, :column 1, :end-line 1208, :end-column 13, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1208, :column 6, :end-line 1208, :end-column 13}, :doc "Generate keywords without namespaces.", :tag any}, bind-helper {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 99, :column 8, :end-line 99, :end-column 19, :private true, :arglists (quote ([k]))}, :private true, :name clojure.test.check.generators/bind-helper, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, hash-map {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 510, :column 7, :end-line 510, :end-column 15, :arglists (quote ([& kvs])), :doc "Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n  Examples:\n\n    (gen/hash-map :a gen/boolean :b gen/nat)\n  ", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(kvs)], :arglists ([& kvs]), :arglists-meta (nil)}}, :name clojure.test.check.generators/hash-map, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(kvs)], :arglists ([& kvs]), :arglists-meta (nil)}, :method-params [(kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 510, :end-line 510, :max-fixed-arity 0, :fn-var true, :arglists ([& kvs]), :doc "Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n  Examples:\n\n    (gen/hash-map :a gen/boolean :b gen/nat)\n  "}, call-gen {:no-doc true, :protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 38, :column 7, :end-line 38, :end-column 15, :arglists (quote ([{generator-fn :gen} rnd size])), :no-doc true}, :name clojure.test.check.generators/call-gen, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 15, :method-params ([p__21055 rnd size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{generator-fn :gen} rnd size]))}, recursive-helper {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1305, :column 8, :end-line 1305, :end-column 24, :private true, :arglists (quote ([container-gen-fn scalar-gen scalar-size children-size height]))}, :private true, :name clojure.test.check.generators/recursive-helper, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 24, :method-params ([container-gen-fn scalar-gen scalar-size children-size height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1305, :end-line 1305, :max-fixed-arity 5, :fn-var true, :arglists (quote ([container-gen-fn scalar-gen scalar-size children-size height]))}, rand-range {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 208, :column 8, :end-line 208, :end-column 18, :private true, :arglists (quote ([rnd lower upper]))}, :private true, :name clojure.test.check.generators/rand-range, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 18, :method-params ([rnd lower upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rnd lower upper]))}, ratio {:name clojure.test.check.generators/ratio, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1248, :column 1, :end-line 1248, :end-column 11, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1248, :column 6, :end-line 1248, :end-column 11}, :doc "Generates a `clojure.lang.Ratio`. Shrinks toward 0. Not all values generated\n  will be ratios, as many values returned by `/` are not ratios.", :tag any}, transient-set-contains? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 533, :column 17, :end-line 533, :end-column 40, :private true, :arglists (quote ([s k]))}, :private true, :name clojure.test.check.generators/transient-set-contains?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 40, :method-params ([s k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 533, :end-line 533, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s k]))}, such-that {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 328, :column 7, :end-line 328, :end-column 16, :arglists (quote ([pred gen] [pred gen max-tries])), :doc "Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be throw. You can pass an optional\n  third argument to change the number of times tried. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n  ", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred gen] [pred gen max-tries]), :arglists ([pred gen] [pred gen max-tries]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/such-that, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred gen] [pred gen max-tries]), :arglists ([pred gen] [pred gen max-tries]), :arglists-meta (nil nil)}, :method-params ([pred gen] [pred gen max-tries]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 3, :fn-var true, :arglists ([pred gen] [pred gen max-tries]), :doc "Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be throw. You can pass an optional\n  third argument to change the number of times tried. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n  "}, shrink-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 171, :column 8, :end-line 171, :end-column 18, :private true, :arglists (quote ([integer]))}, :private true, :name clojure.test.check.generators/shrink-int, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 18, :method-params ([integer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([integer]))}, vector-distinct-by {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 697, :column 7, :end-line 697, :end-column 25, :arglists (quote ([key-fn gen] [key-fn gen opts])), :doc "Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-fn gen] [key-fn gen opts]), :arglists ([key-fn gen] [key-fn gen opts]), :arglists-meta (nil nil)}}, :name clojure.test.check.generators/vector-distinct-by, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-fn gen] [key-fn gen opts]), :arglists ([key-fn gen] [key-fn gen opts]), :arglists-meta (nil nil)}, :method-params ([key-fn gen] [key-fn gen opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 697, :end-line 697, :max-fixed-arity 3, :fn-var true, :arglists ([key-fn gen] [key-fn gen opts]), :doc "Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as such-that.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)"}, swap {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 478, :column 8, :end-line 478, :end-column 12, :private true, :arglists (quote ([coll [i1 i2]]))}, :private true, :name clojure.test.check.generators/swap, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 12, :method-params ([coll p__21132]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 478, :end-line 478, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll [i1 i2]]))}, int-rose-tree {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 175, :column 8, :end-line 175, :end-column 21, :private true, :arglists (quote ([value]))}, :private true, :name clojure.test.check.generators/int-rose-tree, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 21, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, fmap {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 86, :column 7, :end-line 86, :end-column 11, :arglists (quote ([f gen]))}, :name clojure.test.check.generators/fmap, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 11, :method-params ([f gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f gen]))}, MAX_INTEGER {:name clojure.test.check.generators/MAX_INTEGER, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 805, :column 1, :end-line 805, :end-column 27, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 805, :column 16, :end-line 805, :end-column 27, :private true}, :tag number}, ->Generator {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 27, :column 12, :end-line 27, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([gen]))}, :name clojure.test.check.generators/->Generator, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 21, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen]))}, no-shrink {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 363, :column 7, :end-line 363, :end-column 16, :arglists (quote ([gen])), :doc "Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."}, :name clojure.test.check.generators/no-shrink, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 16, :method-params ([gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 363, :end-line 363, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen])), :doc "Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."}, char-ascii {:name clojure.test.check.generators/char-ascii, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1113, :column 1, :end-line 1113, :end-column 16, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1113, :column 6, :end-line 1113, :end-column 16}, :doc "Generate only ascii character.", :tag any}, keyword-segment-first {:meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1203, :column 23, :end-line 1203, :end-column 44, :private true}, :private true, :name clojure.test.check.generators/keyword-segment-first, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 44, :column 1, :line 1203, :end-line 1203, :tag any, :doc "Generate segments of a keyword that can be first (between \\:)"}, simple-type-printable {:name clojure.test.check.generators/simple-type-printable, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1295, :column 1, :end-line 1295, :end-column 27, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 1295, :column 6, :end-line 1295, :end-column 27}, :tag any}, halfs {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :line 167, :column 8, :end-line 167, :end-column 13, :private true, :arglists (quote ([n]))}, :private true, :name clojure.test.check.generators/halfs, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\generators.cljc", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}}, :cljs.spec/registry-ref [], :require-macros {core cljs.core, cljs.core cljs.core}, :cljs.analyzer/constants {:seen #{:max-tries :min clojure.test.check.generators/generator? val__21297__auto__ :else :gen do gen clojure.test.check.generators/bind if :infinite? cljs.core/let clojure.test.check.generators/let :max / cljs.core/fn clojure.test.check.generators/return :max-elements :num-elements :min-elements :NaN? :so-far}, :order [:gen gen :max-tries :num-elements :so-far :else :min-elements :max-elements :min :max :infinite? :NaN? / cljs.core/let val__21297__auto__ do if clojure.test.check.generators/generator? clojure.test.check.generators/return clojure.test.check.generators/bind cljs.core/fn clojure.test.check.generators/let]}, :doc nil}