{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{bit-count bit-xor unsigned-bit-shift-right * bit-or +}, :name clojure.test.check.random.longs, :imports nil, :requires {bit-count clojure.test.check.random.longs.bit-count-impl, clojure.test.check.random.longs.bit-count-impl clojure.test.check.random.longs.bit-count-impl, long goog.math.Long, goog.math.Long goog.math.Long}, :cljs.spec/speced-vars [], :uses nil, :defs {from-number {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([x]))}, :name clojure.test.check.random.longs/from-number, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, bit-count {:name clojure.test.check.random.longs/bit-count, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 58, :column 1, :end-line 58, :end-column 15, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 58, :column 6, :end-line 58, :end-column 15}}, bit-xor {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 31, :column 7, :end-line 31, :end-column 14, :arglists (quote ([x y]))}, :name clojure.test.check.random.longs/bit-xor, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :end-column 14, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, unsigned-bit-shift-right {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 19, :column 7, :end-line 19, :end-column 31, :arglists (quote ([x n]))}, :name clojure.test.check.random.longs/unsigned-bit-shift-right, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :end-column 31, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, * {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 27, :column 7, :end-line 27, :end-column 8, :arglists (quote ([x y]))}, :name clojure.test.check.random.longs/*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :end-column 8, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, from-string {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 39, :column 7, :end-line 39, :end-column 18, :arglists (quote ([s radix]))}, :name clojure.test.check.random.longs/from-string, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :end-column 18, :method-params ([s radix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s radix]))}, ->long {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 47, :column 7, :end-line 47, :end-column 13, :arglists (quote ([x])), :doc "Coerces to long, or returns nil if not possible."}, :name clojure.test.check.random.longs/->long, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Coerces to long, or returns nil if not possible."}, bit-or {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 35, :column 7, :end-line 35, :end-column 13, :arglists (quote ([x y]))}, :name clojure.test.check.random.longs/bit-or, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :end-column 13, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, ONE {:name clojure.test.check.random.longs/ONE, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 56, :column 1, :end-line 56, :end-column 9, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 56, :column 6, :end-line 56, :end-column 9}, :tag any}, + {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :line 23, :column 7, :end-line 23, :end-column 8, :arglists (quote ([x y]))}, :name clojure.test.check.random.longs/+, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\5u0\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check\\random\\longs.cljs", :end-column 8, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Internal namespace, wrapping some goog.math.Long functionality."}