{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clojure.test.check, :imports nil, :requires {gen clojure.test.check.generators, clojure.test.check.generators clojure.test.check.generators, ct clojure.test.check.clojure-test, clojure.test.check.clojure-test clojure.test.check.clojure-test, random clojure.test.check.random, clojure.test.check.random clojure.test.check.random, rose clojure.test.check.rose-tree, clojure.test.check.rose-tree clojure.test.check.rose-tree, clojure.test.check.impl clojure.test.check.impl}, :cljs.spec/speced-vars [], :uses {exception-like? clojure.test.check.impl, get-current-time-millis clojure.test.check.impl}, :defs {shrink-loop {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :line 79, :column 8, :end-line 79, :end-column 19, :private true, :arglists (quote ([rose-tree])), :doc "Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found."}, :private true, :name clojure.test.check/shrink-loop, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :end-column 19, :method-params ([rose-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rose-tree])), :doc "Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found."}, failure {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :line 112, :column 8, :end-line 112, :end-column 15, :private true, :arglists (quote ([property failing-rose-tree trial-number size seed]))}, :private true, :name clojure.test.check/failure, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :end-column 15, :method-params ([property failing-rose-tree trial-number size seed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 5, :fn-var true, :arglists (quote ([property failing-rose-tree trial-number size seed]))}, make-rng {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :line 20, :column 8, :end-line 20, :end-column 16, :private true, :arglists (quote ([seed]))}, :private true, :name clojure.test.check/make-rng, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :end-column 16, :method-params ([seed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seed]))}, complete {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :line 27, :column 8, :end-line 27, :end-column 16, :private true, :arglists (quote ([property num-trials seed]))}, :private true, :name clojure.test.check/complete, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :end-column 16, :method-params ([property num-trials seed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([property num-trials seed]))}, not-falsey-or-exception? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :line 32, :column 8, :end-line 32, :end-column 32, :private true, :arglists (quote ([value])), :doc "True if the value is not falsy or an exception"}, :private true, :name clojure.test.check/not-falsey-or-exception?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :end-column 32, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "True if the value is not falsy or an exception"}, quick-check {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :line 37, :column 7, :end-line 37, :end-column 18, :arglists (quote ([num-tests property & {:keys [seed max-size], :or {max-size 200}}])), :doc "Tests `property` `num-tests` times.\n  Takes optional keys `:seed` and `:max-size`. The seed parameter\n  can be used to re-run previous tests, as the seed used is returned\n  after a test is run. The max-size can be used to control the 'size'\n  of generated values. The size will start at 0, and grow up to\n  max-size, as the number of tests increases. Generators will use\n  the size parameter to bound their growth. This prevents, for example,\n  generating a five-thousand element vector on the very first test.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n      (quick-check 100 p)\n  ", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(num-tests property {:keys [seed max-size], :or {max-size 200}})], :arglists ([num-tests property & {:keys [seed max-size], :or {max-size 200}}]), :arglists-meta (nil)}}, :name clojure.test.check/quick-check, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(num-tests property {:keys [seed max-size], :or {max-size 200}})], :arglists ([num-tests property & {:keys [seed max-size], :or {max-size 200}}]), :arglists-meta (nil)}, :method-params [(num-tests property {:keys [seed max-size], :or {max-size 200}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists ([num-tests property & {:keys [seed max-size], :or {max-size 200}}]), :doc "Tests `property` `num-tests` times.\n  Takes optional keys `:seed` and `:max-size`. The seed parameter\n  can be used to re-run previous tests, as the seed used is returned\n  after a test is run. The max-size can be used to control the 'size'\n  of generated values. The size will start at 0, and grow up to\n  max-size, as the number of tests increases. Generators will use\n  the size parameter to bound their growth. This prevents, for example,\n  generating a five-thousand element vector on the very first test.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n      (quick-check 100 p)\n  "}, smallest-shrink {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :line 72, :column 8, :end-line 72, :end-column 23, :private true, :arglists (quote ([total-nodes-visited depth smallest]))}, :private true, :name clojure.test.check/smallest-shrink, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\clojure\\test\\check.cljc", :end-column 23, :method-params ([total-nodes-visited depth smallest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists (quote ([total-nodes-visited depth smallest]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:args :shrunk :total-nodes-visited :num-tests :max-size :seed :fail :result :smallest :failing-size :depth}, :order [:result :num-tests :seed :max-size :args :total-nodes-visited :depth :smallest :failing-size :fail :shrunk]}, :doc nil}