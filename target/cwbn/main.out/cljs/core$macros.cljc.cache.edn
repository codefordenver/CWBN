{:rename-macros {}, :renames {}, :externs {Error {}, RegExp {}, Array {}, Date {}, goog {string {StringBuffer {}}}}, :use-macros {assert-args cljs.support}, :excludes #{unsafe-bit-and macroexpand unchecked-remainder-int when-first cond->> bit-set gen-class while satisfies? unchecked-subtract-int ns-unmap import bit-shift-right aget pvalues bound-fn specify vswap! dosync caching-hash bit-shift-left coercive-not aclone dec unchecked-get ns-publics < with-loading-context test this-as .. delay char unchecked-long some? unchecked-negate simple-benchmark gen-interface unchecked-inc-int with-bindings unchecked-set js-str bit-shift-right-zero-fill implements? goog-define pos? specify! if-not alength bit-xor doseq unsigned-bit-shift-right neg? unchecked-float undefined? deftype mask when-let divide coercive-boolean <= if-some * min with-precision lazy-seq js-delete truth_ defcurried js-debugger let -> defstruct coercive-not= get doto areduce long double definline bit-and-not unchecked-add-int future fn short definterface js-this unchecked-double string? js-arguments unchecked-multiply-int as-> when-not when int > unchecked-int keyword? use-macros unchecked-multiply gen-apply-to some->> unchecked-dec defn float js-in ns es6-iterable mod amap use declare - hash-set or assert-args extend-type macroexpand-1 bit-test defmethod time zero? require unchecked-dec-int memfn js-obj nil? extend-protocol cond-> dotimes bit-and reify instance? with-open load-file* defonce unchecked-add rfn identical? unchecked-divide-int defn- defprotocol unchecked-subtract sync assert true? array letfn / bitpos bit-or vector proxy-super >= loop bit-flip js-mod unchecked-divide with-out-str condp cond with-in-str some-> ns-interns for binding array-map unchecked-byte with-local-vars ns-imports defmacro unchecked-short alias proxy inc with-redefs bit-clear locking list + var aset destructure defmulti str coercive-= hash-map gen-apply-to-simple if-let false? case exists? bit-not io! byte max == lazy-cat comment copy-arguments when-assert unsafe-cast resolve defrecord make-array unchecked-negate-int unchecked-inc and number? js-comment symbol? when-some unchecked-char require-macros ->> js-inline-comment refer-clojure}, :name cljs.core$macros, :imports nil, :requires {cljs.compiler cljs.compiler, comp cljs.compiler, cljs.core cljs.core, cljs.env cljs.env, ana cljs.analyzer, clojure.set clojure.set, env cljs.env, string clojure.string, cljs.analyzer cljs.analyzer, clojure.string clojure.string, clojure.walk clojure.walk, core cljs.core}, :cljs.spec/speced-vars [], :uses nil, :defs {unsafe-bit-and {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1169, :column 31, :end-line 1169, :end-column 45, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/unsafe-bit-and, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 45, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1169, :macro true, :end-line 1169, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, macroexpand {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2965, :column 16, :end-line 2965, :end-column 27, :macro true, :arglists (quote ([quoted])), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms."}, :name cljs.core$macros/macroexpand, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([&form &env quoted]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2965, :macro true, :end-line 2965, :max-fixed-arity 3, :fn-var false, :arglists (quote ([quoted])), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms."}, unchecked-remainder-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1076, :column 31, :end-line 1076, :end-column 54, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/unchecked-remainder-int, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 54, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1076, :macro true, :end-line 1076, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, when-first {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 398, :column 19, :end-line 398, :end-column 29, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-first, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 398, :macro true, :end-line 398, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once"}, cond->> {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 460, :column 19, :end-line 460, :end-column 26, :macro true, :arglists (quote ([expr & clauses])), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/cond->>, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 460, :macro true, :end-line 460, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression."}, bit-set {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1209, :column 31, :end-line 1209, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-set, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 38, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1209, :macro true, :end-line 1209, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, while {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 433, :column 19, :end-line 433, :end-column 24, :macro true, :arglists (quote ([test & body])), :doc "Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/while, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 433, :macro true, :end-line 433, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env test & body]), :doc "Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil"}, satisfies? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2082, :column 16, :end-line 2082, :end-column 26, :macro true, :arglists (quote ([psym x])), :doc "Returns true if x satisfies the protocol"}, :name cljs.core$macros/satisfies?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env psym x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2082, :macro true, :end-line 2082, :max-fixed-arity 4, :fn-var false, :arglists (quote ([psym x])), :doc "Returns true if x satisfies the protocol"}, protocol-prefix {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1263, :column 13, :end-line 1263, :end-column 28, :private true, :arglists (quote ([psym]))}, :private true, :name cljs.core$macros/protocol-prefix, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([psym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1263, :end-line 1263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([psym]))}, unchecked-subtract-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1082, :column 31, :end-line 1082, :end-column 53, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-subtract-int, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 53, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1082, :macro true, :end-line 1082, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, ns-unmap {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2827, :column 16, :end-line 2827, :end-column 24, :macro true, :arglists (quote ([quoted-ns quoted-sym])), :doc "Removes the mappings for the symbol from the namespace."}, :name cljs.core$macros/ns-unmap, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :method-params ([&form &env quoted-ns quoted-sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2827, :macro true, :end-line 2827, :max-fixed-arity 4, :fn-var false, :arglists (quote ([quoted-ns quoted-sym])), :doc "Removes the mappings for the symbol from the namespace."}, sigs {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 594, :column 3, :end-line 594, :end-column 7, :private true}, :private true, :name cljs.core$macros/sigs, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 7, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (), :column 1, :line 592, :end-line 594, :max-fixed-arity 1, :fn-var true, :arglists nil}, bool-expr {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 832, :column 13, :end-line 832, :end-column 22, :private true, :arglists (quote ([e]))}, :private true, :name cljs.core$macros/bool-expr, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 832, :end-line 832, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, adapt-ifn-params {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1427, :column 13, :end-line 1427, :end-column 29, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-ifn-params, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :method-params ([type p__20136]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1427, :end-line 1427, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, import {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2928, :column 16, :end-line 2928, :end-column 22, :macro true, :arglists (quote ([& import-symbols-or-lists])), :doc "import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env import-symbols-or-lists)], :arglists ([&form &env & import-symbols-or-lists]), :arglists-meta (nil)}}, :name cljs.core$macros/import, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env import-symbols-or-lists)], :arglists ([&form &env & import-symbols-or-lists]), :arglists-meta (nil)}, :method-params [(&form &env import-symbols-or-lists)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2928, :macro true, :end-line 2928, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & import-symbols-or-lists]), :doc "import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly."}, bit-shift-right {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1200, :column 31, :end-line 1200, :end-column 46, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-right, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 46, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1200, :macro true, :end-line 1200, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, aget {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 985, :column 16, :end-line 985, :end-column 20, :macro true, :arglists (quote ([array idx] [array idx & idxs])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env array idx]), :arglists ([&form &env array idx] [&form &env array idx & idxs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/aget, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env array idx]), :arglists ([&form &env array idx] [&form &env array idx & idxs]), :arglists-meta (nil nil)}, :method-params ([&form &env array idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 985, :macro true, :end-line 985, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env array idx] [&form &env array idx & idxs])}, specify {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1355, :column 16, :end-line 1355, :end-column 23, :macro true, :arglists (quote ([expr & impls])), :doc "Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/specify, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}, :method-params [(&form &env expr impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1355, :macro true, :end-line 1355, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env expr & impls]), :doc "Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance."}, vswap! {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2839, :column 16, :end-line 2839, :end-column 22, :macro true, :arglists (quote ([vol f & args])), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env vol f args)], :arglists ([&form &env vol f & args]), :arglists-meta (nil)}}, :name cljs.core$macros/vswap!, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env vol f args)], :arglists ([&form &env vol f & args]), :arglists-meta (nil)}, :method-params [(&form &env vol f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2839, :macro true, :end-line 2839, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env vol f & args]), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in."}, type-hint-sigs {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1571, :column 13, :end-line 1571, :end-column 27, :private true, :arglists (quote ([type-sym sig]))}, :private true, :name cljs.core$macros/type-hint-sigs, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([type-sym sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1571, :end-line 1571, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym sig]))}, caching-hash {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1221, :column 16, :end-line 1221, :end-column 28, :macro true, :arglists (quote ([coll hash-fn hash-key]))}, :name cljs.core$macros/caching-hash, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([&form &env coll hash-fn hash-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1221, :macro true, :end-line 1221, :max-fixed-arity 5, :fn-var false, :arglists (quote ([coll hash-fn hash-key]))}, bit-shift-left {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1197, :column 31, :end-line 1197, :end-column 45, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-left, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 45, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1197, :macro true, :end-line 1197, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, js-base-type {:name cljs.core$macros/js-base-type, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1279, :column 1, :end-line 1279, :end-column 28, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1279, :column 16, :end-line 1279, :end-column 28, :private true}, :tag cljs.core/IMap}, coercive-not {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 882, :column 16, :end-line 882, :end-column 28, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/coercive-not, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 882, :macro true, :end-line 882, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, resolve-var {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1392, :column 13, :end-line 1392, :end-column 24, :private true, :arglists (quote ([env sym]))}, :private true, :name cljs.core$macros/resolve-var, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1392, :end-line 1392, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym]))}, dec {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1131, :column 31, :end-line 1131, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/dec, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1131, :macro true, :end-line 1131, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, unchecked-get {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1012, :column 16, :end-line 1012, :end-column 29, :macro true, :arglists (quote ([obj key])), :doc "INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis."}, :name cljs.core$macros/unchecked-get, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :method-params ([&form &env obj key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1012, :macro true, :end-line 1012, :max-fixed-arity 4, :fn-var false, :arglists (quote ([obj key])), :doc "INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis."}, ns-publics {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2783, :column 16, :end-line 2783, :end-column 26, :macro true, :arglists (quote ([quoted-ns])), :doc "Returns a map of the public intern mappings for the namespace."}, :name cljs.core$macros/ns-publics, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env quoted-ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2783, :macro true, :end-line 2783, :max-fixed-arity 3, :fn-var false, :arglists (quote ([quoted-ns])), :doc "Returns a map of the public intern mappings for the namespace."}, < {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1106, :column 31, :end-line 1106, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/<, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1106, :macro true, :end-line 1106, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, variadic-fn? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2984, :column 13, :end-line 2984, :end-column 25, :private true, :arglists (quote ([fdecl]))}, :private true, :name cljs.core$macros/variadic-fn?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2984, :end-line 2984, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl]))}, this-as {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1365, :column 16, :end-line 1365, :end-column 23, :macro true, :arglists (quote ([name & body])), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name body)], :arglists ([&form &env name & body]), :arglists-meta (nil)}}, :name cljs.core$macros/this-as, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name body)], :arglists ([&form &env name & body]), :arglists-meta (nil)}, :method-params [(&form &env name body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1365, :macro true, :end-line 1365, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env name & body]), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided."}, .. {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 137, :column 19, :end-line 137, :end-column 21, :macro true, :arglists (quote ([x form] [x form & more])), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x form]), :arglists ([&form &env x form] [&form &env x form & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/.., :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x form]), :arglists ([&form &env x form] [&form &env x form & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 137, :macro true, :end-line 137, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x form] [&form &env x form & more]), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand."}, delay {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2120, :column 16, :end-line 2120, :end-column 21, :macro true, :arglists (quote ([& body])), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/delay, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2120, :macro true, :end-line 2120, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & body]), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls."}, some? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 879, :column 16, :end-line 879, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/some?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 879, :macro true, :end-line 879, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, unchecked-negate {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1070, :column 31, :end-line 1070, :end-column 47, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-negate, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 47, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1070, :macro true, :end-line 1070, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, simple-benchmark {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2685, :column 16, :end-line 2685, :end-column 32, :macro true, :arglists (quote ([bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}])), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.", :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :arglists-meta (nil)}}, :name cljs.core$macros/simple-benchmark, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :arglists-meta (nil)}, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2685, :macro true, :end-line 2685, :max-fixed-arity 5, :fn-var false, :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case."}, prepare-protocol-masks {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1625, :column 13, :end-line 1625, :end-column 35, :private true, :arglists (quote ([env impls]))}, :private true, :name cljs.core$macros/prepare-protocol-masks, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 35, :method-params ([env impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1625, :end-line 1625, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env impls]))}, unchecked-inc-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1061, :column 31, :end-line 1061, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-inc-int, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 48, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1061, :macro true, :end-line 1061, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, unchecked-set {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1019, :column 16, :end-line 1019, :end-column 29, :macro true, :arglists (quote ([obj key val])), :doc "INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis."}, :name cljs.core$macros/unchecked-set, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :method-params ([&form &env obj key val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1019, :macro true, :end-line 1019, :max-fixed-arity 5, :fn-var false, :arglists (quote ([obj key val])), :doc "INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis."}, js-str {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2774, :column 16, :end-line 2774, :end-column 22, :macro true, :arglists (quote ([s]))}, :name cljs.core$macros/js-str, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :method-params ([&form &env s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2774, :macro true, :end-line 2774, :max-fixed-arity 3, :fn-var false, :arglists (quote ([s]))}, bit-shift-right-zero-fill {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1203, :column 31, :end-line 1203, :end-column 56, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-right-zero-fill, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 56, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1203, :macro true, :end-line 1203, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, implements? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2056, :column 16, :end-line 2056, :end-column 27, :macro true, :arglists (quote ([psym x])), :doc "EXPERIMENTAL"}, :name cljs.core$macros/implements?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([&form &env psym x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2056, :macro true, :end-line 2056, :max-fixed-arity 4, :fn-var false, :arglists (quote ([psym x])), :doc "EXPERIMENTAL"}, assert-valid-fdecl {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 553, :column 30, :end-line 553, :end-column 48, :dynamic true, :private true, :arglists (quote ([fdecl])), :doc "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn."}, :private true, :name cljs.core$macros/assert-valid-fdecl, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 48, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 553, :end-line 553, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl])), :doc "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn."}, const? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2222, :column 13, :end-line 2222, :end-column 19, :private true, :arglists (quote ([env x]))}, :private true, :name cljs.core$macros/const?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 19, :method-params ([env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2222, :end-line 2222, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env x]))}, goog-define {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 729, :column 16, :end-line 729, :end-column 27, :macro true, :arglists (quote ([sym default])), :doc "Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}"}, :name cljs.core$macros/goog-define, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([&form &env sym default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 729, :macro true, :end-line 729, :max-fixed-arity 4, :fn-var false, :arglists (quote ([sym default])), :doc "Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}"}, pos? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1140, :column 31, :end-line 1140, :end-column 35, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/pos?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 35, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1140, :macro true, :end-line 1140, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, specify! {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1347, :column 16, :end-line 1347, :end-column 24, :macro true, :arglists (quote ([expr & impls])), :doc "Identical to reify but mutates its first argument.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/specify!, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}, :method-params [(&form &env expr impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1347, :macro true, :end-line 1347, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env expr & impls]), :doc "Identical to reify but mutates its first argument."}, if-not {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 359, :column 19, :end-line 359, :end-column 25, :macro true, :arglists (quote ([test then] [test then else])), :doc "Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([&form &env test then] [&form &env test then else]), :arglists ([&form &env test then] [&form &env test then else]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-not, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([&form &env test then] [&form &env test then else]), :arglists ([&form &env test then] [&form &env test then else]), :arglists-meta (nil nil)}, :method-params ([&form &env test then] [&form &env test then else]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 359, :macro true, :end-line 359, :max-fixed-arity 5, :fn-var false, :arglists ([&form &env test then] [&form &env test then else]), :doc "Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil."}, build-positional-factory {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1675, :column 13, :end-line 1675, :end-column 37, :private true, :arglists (quote ([rsym rname fields]))}, :private true, :name cljs.core$macros/build-positional-factory, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 37, :method-params ([rsym rname fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1675, :end-line 1675, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rsym rname fields]))}, alength {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2567, :column 16, :end-line 2567, :end-column 23, :macro true, :arglists (quote ([a]))}, :name cljs.core$macros/alength, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([&form &env a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2567, :macro true, :end-line 2567, :max-fixed-arity 3, :fn-var false, :arglists (quote ([a]))}, bit-xor {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1180, :column 31, :end-line 1180, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-xor, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1180, :macro true, :end-line 1180, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, doseq {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2401, :column 16, :end-line 2401, :end-column 21, :macro true, :arglists (quote ([seq-exprs & body])), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env seq-exprs body)], :arglists ([&form &env seq-exprs & body]), :arglists-meta (nil)}}, :name cljs.core$macros/doseq, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env seq-exprs body)], :arglists ([&form &env seq-exprs & body]), :arglists-meta (nil)}, :method-params [(&form &env seq-exprs body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2401, :macro true, :end-line 2401, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env seq-exprs & body]), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil."}, unsigned-bit-shift-right {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1206, :column 31, :end-line 1206, :end-column 55, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/unsigned-bit-shift-right, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 55, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1206, :macro true, :end-line 1206, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, neg? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1143, :column 31, :end-line 1143, :end-column 35, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/neg?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 35, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1143, :macro true, :end-line 1143, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, adapt-ifn-invoke-params {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1435, :column 13, :end-line 1435, :end-column 36, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-ifn-invoke-params, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 36, :method-params ([type p__20143]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1435, :end-line 1435, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, unchecked-float {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1040, :column 16, :end-line 1040, :end-column 31, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-float, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 31, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1040, :macro true, :end-line 1040, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, undefined? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 959, :column 16, :end-line 959, :end-column 26, :macro true, :arglists (quote ([x])), :doc "Return true if argument is identical to the JavaScript undefined value."}, :name cljs.core$macros/undefined?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 959, :macro true, :end-line 959, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :doc "Return true if argument is identical to the JavaScript undefined value."}, deftype {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1691, :column 16, :end-line 1691, :end-column 23, :macro true, :arglists (quote ([t fields & impls])), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env t fields impls)], :arglists ([&form &env t fields & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/deftype, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env t fields impls)], :arglists ([&form &env t fields & impls]), :arglists-meta (nil)}, :method-params [(&form &env t fields impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1691, :macro true, :end-line 1691, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env t fields & impls]), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields"}, mask {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1213, :column 16, :end-line 1213, :end-column 20, :macro true, :arglists (quote ([hash shift]))}, :name cljs.core$macros/mask, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :method-params ([&form &env hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1213, :macro true, :end-line 1213, :max-fixed-arity 4, :fn-var false, :arglists (quote ([hash shift]))}, build-map-factory {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1859, :column 13, :end-line 1859, :end-column 30, :private true, :arglists (quote ([rsym rname fields]))}, :private true, :name cljs.core$macros/build-map-factory, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 30, :method-params ([rsym rname fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1859, :end-line 1859, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rsym rname fields]))}, when-let {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 412, :column 19, :end-line 412, :end-column 27, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-let, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 412, :macro true, :end-line 412, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test"}, divide {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1101, :column 31, :end-line 1101, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/divide, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1101, :macro true, :end-line 1101, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, coercive-boolean {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 891, :column 16, :end-line 891, :end-column 32, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/coercive-boolean, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 891, :macro true, :end-line 891, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, <= {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1111, :column 31, :end-line 1111, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/<=, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1111, :macro true, :end-line 1111, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, if-some {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 517, :column 19, :end-line 517, :end-column 26, :macro true, :arglists (quote ([bindings then] [bindings then else & oldform])), :doc "bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-some, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}, :method-params ([&form &env bindings then]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 517, :macro true, :end-line 517, :max-fixed-arity 5, :fn-var false, :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :doc "bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else"}, * {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1090, :column 31, :end-line 1090, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([] [x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core$macros/*, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([&form &env] [&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1090, :macro true, :end-line 1090, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, min {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1152, :column 31, :end-line 1152, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/min, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1152, :macro true, :end-line 1152, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, adapt-proto-params {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1440, :column 13, :end-line 1440, :end-column 31, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-proto-params, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 31, :method-params ([type p__20150]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1440, :end-line 1440, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, lazy-seq {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2112, :column 16, :end-line 2112, :end-column 24, :macro true, :arglists (quote ([& body])), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/lazy-seq, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2112, :macro true, :end-line 2112, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & body]), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls."}, js-delete {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 903, :column 16, :end-line 903, :end-column 25, :macro true, :arglists (quote ([obj key]))}, :name cljs.core$macros/js-delete, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :method-params ([&form &env obj key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 903, :macro true, :end-line 903, :max-fixed-arity 4, :fn-var false, :arglists (quote ([obj key]))}, truth_ {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 896, :column 16, :end-line 896, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/truth_, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 896, :macro true, :end-line 896, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, annotate-specs {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1647, :column 13, :end-line 1647, :end-column 27, :private true, :arglists (quote ([annots v [f sigs]]))}, :private true, :name cljs.core$macros/annotate-specs, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([annots v p__20218]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1647, :end-line 1647, :max-fixed-arity 3, :fn-var true, :arglists (quote ([annots v [f sigs]]))}, defcurried {:protocol-inline nil, :meta {:private true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(&form &env name doc meta args body)], :arglists ([&form &env name doc meta args & body]), :arglists-meta (nil)}, :column 26, :line 1239, :macro true, :end-line 1239, :arglists (quote ([name doc meta args & body])), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, :private true, :name cljs.core$macros/defcurried, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(&form &env name doc meta args body)], :arglists ([&form &env name doc meta args & body]), :arglists-meta (nil)}, :method-params [(&form &env name doc meta args body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1239, :macro true, :end-line 1239, :max-fixed-arity 6, :fn-var false, :arglists ([&form &env name doc meta args & body]), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, js-debugger {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 909, :column 16, :end-line 909, :end-column 27, :macro true, :arglists (quote ([])), :doc "Emit JavaScript \"debugger;\" statement"}, :name cljs.core$macros/js-debugger, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 909, :macro true, :end-line 909, :max-fixed-arity 2, :fn-var false, :arglists (quote ([])), :doc "Emit JavaScript \"debugger;\" statement"}, let {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 759, :column 16, :end-line 759, :end-column 19, :macro true, :arglists (quote ([bindings & body])), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/let, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 759, :macro true, :end-line 759, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein."}, base-type {:name cljs.core$macros/base-type, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1269, :column 1, :end-line 1269, :end-column 25, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1269, :column 16, :end-line 1269, :end-column 25, :private true}, :tag cljs.core/IMap}, -> {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 105, :column 19, :end-line 105, :end-column 21, :macro true, :arglists (quote ([x & forms])), :doc "Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/->, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 105, :macro true, :end-line 105, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc."}, coercive-not= {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 885, :column 16, :end-line 885, :end-column 29, :macro true, :arglists (quote ([x y]))}, :name cljs.core$macros/coercive-not=, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 885, :macro true, :end-line 885, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x y]))}, doto {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 180, :column 19, :end-line 180, :end-column 23, :macro true, :arglists (quote ([x & forms])), :doc "Evaluates x then calls all of the methods and functions with the\n     value of x supplied at the front of the given arguments.  The forms\n     are evaluated in order.  Returns x.\n\n     (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/doto, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 180, :macro true, :end-line 180, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env x & forms]), :doc "Evaluates x then calls all of the methods and functions with the\n     value of x supplied at the front of the given arguments.  The forms\n     are evaluated in order.  Returns x.\n\n     (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))"}, areduce {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2588, :column 16, :end-line 2588, :end-column 23, :macro true, :arglists (quote ([a idx ret init expr])), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret."}, :name cljs.core$macros/areduce, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([&form &env a idx ret init expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2588, :macro true, :end-line 2588, :max-fixed-arity 7, :fn-var false, :arglists (quote ([a idx ret init expr])), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret."}, double {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1035, :column 16, :end-line 1035, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/double, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1035, :macro true, :end-line 1035, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, emit-extend-protocol {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 205, :column 16, :end-line 205, :end-column 36, :private true, :arglists (quote ([p specs]))}, :private true, :name cljs.core$macros/emit-extend-protocol, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 36, :method-params ([p specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p specs]))}, bit-and-not {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1184, :column 31, :end-line 1184, :end-column 42, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-and-not, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 42, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1184, :macro true, :end-line 1184, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, unchecked-add-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1046, :column 31, :end-line 1046, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-add-int, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 48, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1046, :macro true, :end-line 1046, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, do-rfn {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1245, :column 13, :end-line 1245, :end-column 19, :private true, :arglists (quote ([f1 k fkv]))}, :private true, :name cljs.core$macros/do-rfn, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 19, :method-params ([f1 k fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1245, :end-line 1245, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f1 k fkv]))}, fn {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :column 19, :line 271, :macro true, :end-line 271, :arglists (quote ([& sigs])), :doc "params => positional-params* , or positional-params* & next-param\n     positional-param => binding-form\n     next-param => binding-form\n     name => symbol\n\n     Defines a function", :forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])}, :name cljs.core$macros/fn, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :method-params [(&form &env sigs)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 271, :macro true, :end-line 271, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & sigs]), :doc "params => positional-params* , or positional-params* & next-param\n     positional-param => binding-form\n     next-param => binding-form\n     name => symbol\n\n     Defines a function", :forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])}, short {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1033, :column 16, :end-line 1033, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/short, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1033, :macro true, :end-line 1033, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, js-this {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1362, :column 26, :end-line 1362, :end-column 33, :private true, :macro true, :arglists (quote ([]))}, :private true, :name cljs.core$macros/js-this, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 33, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1362, :macro true, :end-line 1362, :max-fixed-arity 2, :fn-var false, :arglists (quote ([]))}, unchecked-double {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1041, :column 16, :end-line 1041, :end-column 32, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-double, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1041, :macro true, :end-line 1041, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, fast-path-protocols {:name cljs.core$macros/fast-path-protocols, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 795, :column 1, :end-line 795, :end-column 25, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 795, :column 6, :end-line 795, :end-column 25}, :doc "protocol fqn -> [partition number, bit]", :tag any}, string? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 947, :column 16, :end-line 947, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/string?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 947, :macro true, :end-line 947, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, emit-defrecord {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1761, :column 13, :end-line 1761, :end-column 27, :private true, :arglists (quote ([env tagname rname fields impls])), :doc "Do not use this directly - use defrecord"}, :private true, :name cljs.core$macros/emit-defrecord, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([env tagname rname fields impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1761, :end-line 1761, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env tagname rname fields impls])), :doc "Do not use this directly - use defrecord"}, validate-impl-sigs {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1507, :column 13, :end-line 1507, :end-column 31, :private true, :arglists (quote ([env p method]))}, :private true, :name cljs.core$macros/validate-impl-sigs, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 31, :method-params ([env p method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1507, :end-line 1507, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env p method]))}, js-arguments {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 900, :column 16, :end-line 900, :end-column 28, :macro true, :arglists (quote ([]))}, :name cljs.core$macros/js-arguments, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 900, :macro true, :end-line 900, :max-fixed-arity 2, :fn-var false, :arglists (quote ([]))}, unchecked-multiply-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1067, :column 31, :end-line 1067, :end-column 53, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-multiply-int, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 53, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1067, :macro true, :end-line 1067, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, as-> {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 477, :column 19, :end-line 477, :end-column 23, :macro true, :arglists (quote ([expr name & forms])), :doc "Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env expr name forms)], :arglists ([&form &env expr name & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/as->, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env expr name forms)], :arglists ([&form &env expr name & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr name forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 477, :macro true, :end-line 477, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env expr name & forms]), :doc "Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form."}, when-not {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 427, :column 19, :end-line 427, :end-column 27, :macro true, :arglists (quote ([test & body])), :doc "Evaluates test. If logical false, evaluates body in an implicit do.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-not, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 427, :macro true, :end-line 427, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env test & body]), :doc "Evaluates test. If logical false, evaluates body in an implicit do."}, when {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 392, :column 19, :end-line 392, :end-column 23, :macro true, :arglists (quote ([test & body])), :doc "Evaluates test. If logical true, evaluates body in an implicit do.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 392, :macro true, :end-line 392, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env test & body]), :doc "Evaluates test. If logical true, evaluates body in an implicit do."}, int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1177, :column 31, :end-line 1177, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/int, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1177, :macro true, :end-line 1177, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, multi-arity-fn {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 3062, :column 13, :end-line 3062, :end-column 27, :private true, :arglists (quote ([name meta fdecl emit-var?]))}, :private true, :name cljs.core$macros/multi-arity-fn, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([name meta fdecl emit-var?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3062, :end-line 3062, :max-fixed-arity 4, :fn-var true, :arglists (quote ([name meta fdecl emit-var?]))}, > {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1116, :column 31, :end-line 1116, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/>, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1116, :macro true, :end-line 1116, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, keyword? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 982, :column 16, :end-line 982, :end-column 24, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/keyword?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 982, :macro true, :end-line 982, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, ->impl-map {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1397, :column 13, :end-line 1397, :end-column 23, :private true, :arglists (quote ([impls]))}, :private true, :name cljs.core$macros/->impl-map, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1397, :end-line 1397, :max-fixed-arity 1, :fn-var true, :arglists (quote ([impls]))}, js-obj* {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2538, :column 13, :end-line 2538, :end-column 20, :private true, :arglists (quote ([kvs]))}, :private true, :name cljs.core$macros/js-obj*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :method-params ([kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2538, :end-line 2538, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kvs]))}, use-macros {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2923, :column 16, :end-line 2923, :end-column 26, :macro true, :arglists (quote ([& args])), :doc "Similar to use but only for macros.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/use-macros, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2923, :macro true, :end-line 2923, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & args]), :doc "Similar to use but only for macros."}, unchecked-multiply {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1064, :column 31, :end-line 1064, :end-column 49, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-multiply, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1064, :macro true, :end-line 1064, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, gen-apply-to {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2716, :column 16, :end-line 2716, :end-column 28, :macro true, :arglists (quote ([]))}, :name cljs.core$macros/gen-apply-to, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2716, :macro true, :end-line 2716, :max-fixed-arity 2, :fn-var false, :arglists (quote ([]))}, some->> {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 503, :column 19, :end-line 503, :end-column 26, :macro true, :arglists (quote ([expr & forms])), :doc "When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/some->>, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 503, :macro true, :end-line 503, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc"}, unchecked-dec {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1049, :column 31, :end-line 1049, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-dec, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 44, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1049, :macro true, :end-line 1049, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, defn {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 3140, :column 3, :end-line 3140, :end-column 7, :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.", :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?]))}, :name cljs.core$macros/defn, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 7, :method-params ([&form &env name fdecl]), :protocol-impl nil, :arglists-meta (nil {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 3138, :column 16, :end-line 3139, :end-column 88}), :column 1, :line 3133, :end-line 3140, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?])), :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions."}, float {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1034, :column 16, :end-line 1034, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/float, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1034, :macro true, :end-line 1034, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, js-in {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 906, :column 16, :end-line 906, :end-column 21, :macro true, :arglists (quote ([key obj]))}, :name cljs.core$macros/js-in, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :method-params ([&form &env key obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 906, :macro true, :end-line 906, :max-fixed-arity 4, :fn-var false, :arglists (quote ([key obj]))}, es6-iterable {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2777, :column 16, :end-line 2777, :end-column 28, :macro true, :arglists (quote ([ty]))}, :name cljs.core$macros/es6-iterable, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([&form &env ty]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2777, :macro true, :end-line 2777, :max-fixed-arity 3, :fn-var false, :arglists (quote ([ty]))}, amap {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2572, :column 16, :end-line 2572, :end-column 20, :macro true, :arglists (quote ([a idx ret expr])), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret."}, :name cljs.core$macros/amap, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :method-params ([&form &env a idx ret expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2572, :macro true, :end-line 2572, :max-fixed-arity 6, :fn-var false, :arglists (quote ([a idx ret expr])), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret."}, type-hint-impl-map {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1577, :column 13, :end-line 1577, :end-column 31, :private true, :arglists (quote ([type-sym impl-map]))}, :private true, :name cljs.core$macros/type-hint-impl-map, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 31, :method-params ([type-sym impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1577, :end-line 1577, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym impl-map]))}, use {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2910, :column 16, :end-line 2910, :end-column 19, :macro true, :arglists (quote ([& args])), :doc "Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/use, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2910, :macro true, :end-line 2910, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & args]), :doc "Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])"}, declare {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 175, :column 19, :end-line 175, :end-column 26, :macro true, :arglists (quote ([& names])), :doc "defs the supplied var names with no bindings, useful for making forward declarations.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env names)], :arglists ([&form &env & names]), :arglists-meta (nil)}}, :name cljs.core$macros/declare, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env names)], :arglists ([&form &env & names]), :arglists-meta (nil)}, :method-params [(&form &env names)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 175, :macro true, :end-line 175, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & names]), :doc "defs the supplied var names with no bindings, useful for making forward declarations."}, fast-path-protocol-partitions-count {:name cljs.core$macros/fast-path-protocol-partitions-count, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 813, :column 1, :end-line 813, :end-column 41, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 813, :column 6, :end-line 813, :end-column 41}, :doc "total number of partitions", :tag #{any number}}, - {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1085, :column 31, :end-line 1085, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/-, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1085, :macro true, :end-line 1085, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, extend-prefix {:name cljs.core$macros/extend-prefix, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1415, :column 1, :end-line 1415, :end-column 39, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1415, :column 26, :end-line 1415, :end-column 39, :private true}, :tag cljs.core/MultiFn}, hash-set {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2524, :column 16, :end-line 2524, :end-column 24, :macro true, :arglists (quote ([] [& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/hash-set, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2524, :macro true, :end-line 2524, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env] [&form &env & xs])}, or {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 858, :column 16, :end-line 858, :end-column 18, :macro true, :arglists (quote ([] [x] [x & next])), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/or, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}, :method-params ([&form &env] [&form &env x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 858, :macro true, :end-line 858, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env] [&form &env x] [&form &env x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil."}, extend-type {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1583, :column 16, :end-line 1583, :end-column 27, :macro true, :arglists (quote ([type-sym & impls])), :doc "Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y] ...) ...)", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env type-sym impls)], :arglists ([&form &env type-sym & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/extend-type, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env type-sym impls)], :arglists ([&form &env type-sym & impls]), :arglists-meta (nil)}, :method-params [(&form &env type-sym impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1583, :macro true, :end-line 1583, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env type-sym & impls]), :doc "Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y] ...) ...)"}, cs {:name cljs.core$macros/cs, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2703, :column 1, :end-line 2703, :end-column 18, :private true, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2703, :column 16, :end-line 2703, :end-column 18, :private true}, :tag any}, macroexpand-1 {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2954, :column 16, :end-line 2954, :end-column 29, :macro true, :arglists (quote ([quoted])), :doc "If form represents a macro form, returns its expansion,\n  else returns form."}, :name cljs.core$macros/macroexpand-1, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :method-params ([&form &env quoted]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2954, :macro true, :end-line 2954, :max-fixed-arity 3, :fn-var false, :arglists (quote ([quoted])), :doc "If form represents a macro form, returns its expansion,\n  else returns form."}, bit-test {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1194, :column 16, :end-line 1194, :end-column 24, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-test, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1194, :macro true, :end-line 1194, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n]))}, defmethod {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2670, :column 16, :end-line 2670, :end-column 25, :macro true, :arglists (quote ([multifn dispatch-val & fn-tail])), :doc "Creates and installs a new method of multimethod associated with dispatch-value. ", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env multifn dispatch-val fn-tail)], :arglists ([&form &env multifn dispatch-val & fn-tail]), :arglists-meta (nil)}}, :name cljs.core$macros/defmethod, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env multifn dispatch-val fn-tail)], :arglists ([&form &env multifn dispatch-val & fn-tail]), :arglists-meta (nil)}, :method-params [(&form &env multifn dispatch-val fn-tail)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2670, :macro true, :end-line 2670, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env multifn dispatch-val & fn-tail]), :doc "Creates and installs a new method of multimethod associated with dispatch-value. "}, time {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2675, :column 16, :end-line 2675, :end-column 20, :macro true, :arglists (quote ([expr])), :doc "Evaluates expr and prints the time it took. Returns the value of expr."}, :name cljs.core$macros/time, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :method-params ([&form &env expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2675, :macro true, :end-line 2675, :max-fixed-arity 3, :fn-var false, :arglists (quote ([expr])), :doc "Evaluates expr and prints the time it took. Returns the value of expr."}, type-hint-single-arity-sig {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1559, :column 13, :end-line 1559, :end-column 39, :private true, :arglists (quote ([type-sym sig]))}, :private true, :name cljs.core$macros/type-hint-single-arity-sig, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 39, :method-params ([type-sym sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1559, :end-line 1559, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym sig]))}, zero? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1137, :column 31, :end-line 1137, :end-column 36, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/zero?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 36, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1137, :macro true, :end-line 1137, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, require {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2850, :column 16, :end-line 2850, :end-column 23, :macro true, :arglists (quote ([& args])), :doc "Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace.\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n  :rename specifies a map from referred var names to different\n    symbols (and can be used to prevent clashes)\n\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure.string :as string])", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/require, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2850, :macro true, :end-line 2850, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & args]), :doc "Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace.\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n  :rename specifies a map from referred var names to different\n    symbols (and can be used to prevent clashes)\n\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure.string :as string])"}, unchecked-dec-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1052, :column 31, :end-line 1052, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-dec-int, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 48, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1052, :macro true, :end-line 1052, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, proto-assign-impls {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1490, :column 13, :end-line 1490, :end-column 31, :private true, :arglists (quote ([env resolve type-sym type [p sigs]]))}, :private true, :name cljs.core$macros/proto-assign-impls, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 31, :method-params ([env resolve type-sym type p__20183]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1490, :end-line 1490, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env resolve type-sym type [p sigs]]))}, memfn {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 380, :column 16, :end-line 380, :end-column 21, :macro true, :arglists (quote ([name & args])), :doc "Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a JavaScript\n  method as a first-class fn.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}}, :name cljs.core$macros/memfn, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}, :method-params [(&form &env name args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 380, :macro true, :end-line 380, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env name & args]), :doc "Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a JavaScript\n  method as a first-class fn."}, parse-impls {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 197, :column 16, :end-line 197, :end-column 27, :private true, :arglists (quote ([specs]))}, :private true, :name cljs.core$macros/parse-impls, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 197, :end-line 197, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, js-obj {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2547, :column 16, :end-line 2547, :end-column 22, :macro true, :arglists (quote ([& rest])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}}, :name cljs.core$macros/js-obj, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}, :method-params [(&form &env rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2547, :macro true, :end-line 2547, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & rest])}, nil? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 876, :column 16, :end-line 876, :end-column 20, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/nil?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 876, :macro true, :end-line 876, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, type-hint-first-arg {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1555, :column 13, :end-line 1555, :end-column 32, :private true, :arglists (quote ([type-sym argv]))}, :private true, :name cljs.core$macros/type-hint-first-arg, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :method-params ([type-sym argv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1555, :end-line 1555, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym argv]))}, extend-protocol {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 213, :column 19, :end-line 213, :end-column 34, :macro true, :arglists (quote ([p & specs])), :doc "Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env p specs)], :arglists ([&form &env p & specs]), :arglists-meta (nil)}}, :name cljs.core$macros/extend-protocol, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env p specs)], :arglists ([&form &env p & specs]), :arglists-meta (nil)}, :method-params [(&form &env p specs)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 213, :macro true, :end-line 213, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env p & specs]), :doc "Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))"}, cond-> {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 443, :column 19, :end-line 443, :end-column 25, :macro true, :arglists (quote ([expr & clauses])), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/cond->, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 443, :macro true, :end-line 443, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression."}, dotimes {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2600, :column 16, :end-line 2600, :end-column 23, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/dotimes, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2600, :macro true, :end-line 2600, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1."}, bit-and {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1164, :column 31, :end-line 1164, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-and, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1164, :macro true, :end-line 1164, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, reify {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1287, :column 16, :end-line 1287, :end-column 21, :macro true, :arglists (quote ([& impls])), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (seq f)))))\n  == (\"f\" \"o\" \"o\"))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env impls)], :arglists ([&form &env & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/reify, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env impls)], :arglists ([&form &env & impls]), :arglists-meta (nil)}, :method-params [(&form &env impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1287, :macro true, :end-line 1287, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & impls]), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (seq f)))))\n  == (\"f\" \"o\" \"o\"))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}"}, do-curried {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1232, :column 13, :end-line 1232, :end-column 23, :private true, :arglists (quote ([name doc meta args body]))}, :private true, :name cljs.core$macros/do-curried, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([name doc meta args body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1232, :end-line 1232, :max-fixed-arity 5, :fn-var true, :arglists (quote ([name doc meta args body]))}, instance? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 967, :column 16, :end-line 967, :end-column 25, :macro true, :arglists (quote ([c x]))}, :name cljs.core$macros/instance?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :method-params ([&form &env c x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 967, :macro true, :end-line 967, :max-fixed-arity 4, :fn-var false, :arglists (quote ([c x]))}, load-file* {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2951, :column 16, :end-line 2951, :end-column 26, :macro true, :arglists (quote ([f]))}, :name cljs.core$macros/load-file*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2951, :macro true, :end-line 2951, :max-fixed-arity 3, :fn-var false, :arglists (quote ([f]))}, defonce {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 619, :column 16, :end-line 619, :end-column 23, :macro true, :arglists (quote ([x init])), :doc "defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated"}, :name cljs.core$macros/defonce, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([&form &env x init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 619, :macro true, :end-line 619, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x init])), :doc "defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated"}, unchecked-add {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1043, :column 31, :end-line 1043, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-add, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 44, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1043, :macro true, :end-line 1043, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, rfn {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1256, :column 26, :end-line 1256, :end-column 29, :private true, :macro true, :arglists (quote ([[f1 k] fkv])), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, :private true, :name cljs.core$macros/rfn, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :method-params ([&form &env p__20082 fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1256, :macro true, :end-line 1256, :max-fixed-arity 4, :fn-var false, :arglists (quote ([[f1 k] fkv])), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, identical? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 964, :column 16, :end-line 964, :end-column 26, :macro true, :arglists (quote ([a b]))}, :name cljs.core$macros/identical?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 964, :macro true, :end-line 964, :max-fixed-arity 4, :fn-var false, :arglists (quote ([a b]))}, collect-protocols {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1669, :column 13, :end-line 1669, :end-column 30, :private true, :arglists (quote ([impls env]))}, :private true, :name cljs.core$macros/collect-protocols, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 30, :method-params ([impls env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1669, :end-line 1669, :max-fixed-arity 2, :fn-var true, :arglists (quote ([impls env]))}, unchecked-divide-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1055, :column 31, :end-line 1055, :end-column 51, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-divide-int, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 51, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1055, :macro true, :end-line 1055, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, defn- {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 333, :column 19, :end-line 333, :end-column 24, :macro true, :arglists (quote ([name & decls])), :doc "same as defn, yielding non-public def", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name decls)], :arglists ([&form &env name & decls]), :arglists-meta (nil)}}, :name cljs.core$macros/defn-, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name decls)], :arglists ([&form &env name & decls]), :arglists-meta (nil)}, :method-params [(&form &env name decls)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 333, :macro true, :end-line 333, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env name & decls]), :doc "same as defn, yielding non-public def"}, type-hint-multi-arity-sig {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1563, :column 13, :end-line 1563, :end-column 38, :private true, :arglists (quote ([type-sym sig]))}, :private true, :name cljs.core$macros/type-hint-multi-arity-sig, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 38, :method-params ([type-sym sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1563, :end-line 1563, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym sig]))}, maybe-destructured {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 253, :column 4, :end-line 253, :end-column 22, :private true, :arglists (quote ([params body]))}, :private true, :name cljs.core$macros/maybe-destructured, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :method-params ([params body]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 252, :end-line 253, :max-fixed-arity 2, :fn-var true, :arglists (quote ([params body]))}, defprotocol {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1937, :column 16, :end-line 1937, :end-column 27, :macro true, :arglists (quote ([psym & doc+methods])), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env psym doc+methods)], :arglists ([&form &env psym & doc+methods]), :arglists-meta (nil)}}, :name cljs.core$macros/defprotocol, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env psym doc+methods)], :arglists ([&form &env psym & doc+methods]), :arglists-meta (nil)}, :method-params [(&form &env psym doc+methods)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1937, :macro true, :end-line 1937, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env psym & doc+methods]), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17"}, unchecked-subtract {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1079, :column 31, :end-line 1079, :end-column 49, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-subtract, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1079, :macro true, :end-line 1079, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, variadic-fn {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 3027, :column 13, :end-line 3027, :end-column 24, :private true, :arglists (quote ([name meta [[arglist & body :as method] :as fdecl] emit-var?]))}, :private true, :name cljs.core$macros/variadic-fn, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :method-params ([name meta p__20771 emit-var?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3027, :end-line 3027, :max-fixed-arity 4, :fn-var true, :arglists (quote ([name meta [[arglist & body :as method] :as fdecl] emit-var?]))}, gen-apply-to-helper {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2705, :column 13, :end-line 2705, :end-column 32, :private true, :arglists (quote ([] [n])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :private true, :name cljs.core$macros/gen-apply-to-helper, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2705, :end-line 2705, :max-fixed-arity 1, :fn-var true, :arglists ([] [n])}, ifn-invoke-methods {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1455, :column 13, :end-line 1455, :end-column 31, :private true, :arglists (quote ([type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/ifn-invoke-methods, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 31, :method-params ([type type-sym p__20166]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1455, :end-line 1455, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym [f & meths :as form]]))}, assert {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2301, :column 16, :end-line 2301, :end-column 22, :macro true, :arglists (quote ([x] [x message])), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x message]), :arglists ([&form &env x] [&form &env x message]), :arglists-meta (nil nil)}}, :name cljs.core$macros/assert, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x message]), :arglists ([&form &env x] [&form &env x message]), :arglists-meta (nil nil)}, :method-params ([&form &env x] [&form &env x message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2301, :macro true, :end-line 2301, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x message]), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true."}, true? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 941, :column 16, :end-line 941, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/true?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 941, :macro true, :end-line 941, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, array {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2457, :column 16, :end-line 2457, :end-column 21, :macro true, :arglists (quote ([& rest])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}}, :name cljs.core$macros/array, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}, :method-params [(&form &env rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2457, :macro true, :end-line 2457, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & rest])}, multi-arity-fn? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2981, :column 13, :end-line 2981, :end-column 28, :private true, :arglists (quote ([fdecl]))}, :private true, :name cljs.core$macros/multi-arity-fn?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2981, :end-line 2981, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl]))}, letfn {:protocol-inline nil, :meta {:special-form true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnspecs body)], :arglists ([&form &env fnspecs & body]), :arglists-meta (nil)}, :column 19, :line 367, :macro true, :url nil, :end-line 367, :arglists (quote ([fnspecs & body])), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.", :forms (quote [(letfn [fnspecs*] exprs*)])}, :name cljs.core$macros/letfn, :variadic true, :special-form true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnspecs body)], :arglists ([&form &env fnspecs & body]), :arglists-meta (nil)}, :method-params [(&form &env fnspecs body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 367, :macro true, :url nil, :end-line 367, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env fnspecs & body]), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.", :forms (quote [(letfn [fnspecs*] exprs*)])}, / {:protocol-inline nil, :meta {:cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :file nil}, :name cljs.core$macros//, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1096, :macro true, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, bitpos {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1217, :column 16, :end-line 1217, :end-column 22, :macro true, :arglists (quote ([hash shift]))}, :name cljs.core$macros/bitpos, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :method-params ([&form &env hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1217, :macro true, :end-line 1217, :max-fixed-arity 4, :fn-var false, :arglists (quote ([hash shift]))}, bit-or {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1173, :column 31, :end-line 1173, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-or, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1173, :macro true, :end-line 1173, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, vector {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2493, :column 16, :end-line 2493, :end-column 22, :macro true, :arglists (quote ([] [& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/vector, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2493, :macro true, :end-line 2493, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env] [&form &env & xs])}, adapt-obj-params {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1423, :column 13, :end-line 1423, :end-column 29, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-obj-params, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :method-params ([type p__20129]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1423, :end-line 1423, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, >= {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1121, :column 31, :end-line 1121, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/>=, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1121, :macro true, :end-line 1121, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, loop {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 771, :column 16, :end-line 771, :end-column 20, :macro true, :arglists (quote ([bindings & body])), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/loop, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 771, :macro true, :end-line 771, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target."}, add-obj-methods {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1446, :column 13, :end-line 1446, :end-column 28, :private true, :arglists (quote ([type type-sym sigs]))}, :private true, :name cljs.core$macros/add-obj-methods, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([type type-sym sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1446, :end-line 1446, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym sigs]))}, bit-flip {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1191, :column 31, :end-line 1191, :end-column 39, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-flip, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 39, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1191, :macro true, :end-line 1191, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, js-mod {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1158, :column 31, :end-line 1158, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([num div]))}, :name cljs.core$macros/js-mod, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 37, :method-params ([&form &env num div]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1158, :macro true, :end-line 1158, :max-fixed-arity 4, :fn-var false, :arglists (quote ([num div])), :cljs.analyzer/numeric true}, to-property {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1371, :column 13, :end-line 1371, :end-column 24, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.core$macros/to-property, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1371, :end-line 1371, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, variadic-fn* {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2988, :column 13, :end-line 2988, :end-column 25, :private true, :arglists (quote ([sym method] [sym [arglist & body :as method] solo])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym method] [sym [arglist & body :as method] solo]), :arglists ([sym method] [sym [arglist & body :as method] solo]), :arglists-meta (nil nil)}}, :private true, :name cljs.core$macros/variadic-fn*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym method] [sym [arglist & body :as method] solo]), :arglists ([sym method] [sym [arglist & body :as method] solo]), :arglists-meta (nil nil)}, :method-params ([sym method] [sym [arglist & body :as method] solo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2988, :end-line 2988, :max-fixed-arity 3, :fn-var true, :arglists ([sym method] [sym [arglist & body :as method] solo])}, with-out-str {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2754, :column 16, :end-line 2754, :end-column 28, :macro true, :arglists (quote ([& body])), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/with-out-str, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2754, :macro true, :end-line 2754, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & body]), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls."}, condp {:protocol-inline nil, :meta {:added "1.0", :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env pred expr clauses)], :arglists ([&form &env pred expr & clauses]), :arglists-meta (nil)}, :column 16, :line 2163, :macro true, :end-line 2163, :arglists (quote ([pred expr & clauses])), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown."}, :added "1.0", :name cljs.core$macros/condp, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env pred expr clauses)], :arglists ([&form &env pred expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env pred expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2163, :macro true, :end-line 2163, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env pred expr & clauses]), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown."}, cond {:protocol-inline nil, :meta {:added "1.0", :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env clauses)], :arglists ([&form &env & clauses]), :arglists-meta (nil)}, :column 19, :line 160, :macro true, :end-line 160, :arglists (quote ([& clauses])), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil."}, :added "1.0", :name cljs.core$macros/cond, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env clauses)], :arglists ([&form &env & clauses]), :arglists-meta (nil)}, :method-params [(&form &env clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 160, :macro true, :end-line 160, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & clauses]), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil."}, check-valid-options {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2614, :column 13, :end-line 2614, :end-column 32, :private true, :arglists (quote ([options & valid-keys])), :doc "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(options valid-keys)], :arglists ([options & valid-keys]), :arglists-meta (nil)}}, :private true, :name cljs.core$macros/check-valid-options, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(options valid-keys)], :arglists ([options & valid-keys]), :arglists-meta (nil)}, :method-params [(options valid-keys)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2614, :end-line 2614, :max-fixed-arity 1, :fn-var true, :arglists ([options & valid-keys]), :doc "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil."}, add-proto-methods* {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1478, :column 13, :end-line 1478, :end-column 31, :private true, :arglists (quote ([pprefix type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/add-proto-methods*, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 31, :method-params ([pprefix type type-sym p__20175]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1478, :end-line 1478, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pprefix type type-sym [f & meths :as form]]))}, some-> {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 489, :column 19, :end-line 489, :end-column 25, :macro true, :arglists (quote ([expr & forms])), :doc "When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/some->, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 489, :macro true, :end-line 489, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc"}, ns-interns {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2813, :column 16, :end-line 2813, :end-column 26, :macro true, :arglists (quote ([quoted-ns])), :doc "Returns a map of the intern mappings for the namespace."}, :name cljs.core$macros/ns-interns, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env quoted-ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2813, :macro true, :end-line 2813, :max-fixed-arity 3, :fn-var false, :arglists (quote ([quoted-ns])), :doc "Returns a map of the intern mappings for the namespace."}, base-assign-impls {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1404, :column 13, :end-line 1404, :end-column 30, :private true, :arglists (quote ([env resolve tsym type [p sigs]]))}, :private true, :name cljs.core$macros/base-assign-impls, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 30, :method-params ([env resolve tsym type p__20121]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1404, :end-line 1404, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env resolve tsym type [p sigs]]))}, for {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2314, :column 16, :end-line 2314, :end-column 19, :macro true, :arglists (quote ([seq-exprs body-expr])), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))"}, :name cljs.core$macros/for, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 19, :method-params ([&form &env seq-exprs body-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2314, :macro true, :end-line 2314, :max-fixed-arity 4, :fn-var false, :arglists (quote ([seq-exprs body-expr])), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))"}, binding {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2150, :column 16, :end-line 2150, :end-column 23, :macro true, :arglists (quote ([bindings & body])), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/binding, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2150, :macro true, :end-line 2150, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values."}, array-map {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2504, :column 16, :end-line 2504, :end-column 25, :macro true, :arglists (quote ([] [& kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/array-map, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2504, :macro true, :end-line 2504, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env] [&form &env & kvs])}, unchecked-byte {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1037, :column 16, :end-line 1037, :end-column 30, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-byte, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 30, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1037, :macro true, :end-line 1037, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, ns-imports {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2799, :column 16, :end-line 2799, :end-column 26, :macro true, :arglists (quote ([quoted-ns])), :doc "Returns a map of the import mappings for the namespace."}, :name cljs.core$macros/ns-imports, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env quoted-ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2799, :macro true, :end-line 2799, :max-fixed-arity 3, :fn-var false, :arglists (quote ([quoted-ns])), :doc "Returns a map of the import mappings for the namespace."}, defmacro {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 3208, :column 12, :end-line 3208, :end-column 20, :arglists (quote ([name doc-string? attr-map? [params*] body] [name doc-string? attr-map? ([params*] body) + attr-map?])), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.", :macro true, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}}, :name cljs.core$macros/defmacro, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}, :method-params [(&form &env name args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 3208, :macro true, :end-line 3208, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env name & args]), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called."}, unchecked-short {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1039, :column 16, :end-line 1039, :end-column 31, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-short, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 31, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1039, :macro true, :end-line 1039, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, validate-fields {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1684, :column 13, :end-line 1684, :end-column 28, :private true, :arglists (quote ([case name fields]))}, :private true, :name cljs.core$macros/validate-fields, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([case name fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1684, :end-line 1684, :max-fixed-arity 3, :fn-var true, :arglists (quote ([case name fields]))}, inc {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1134, :column 31, :end-line 1134, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/inc, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1134, :macro true, :end-line 1134, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, with-redefs {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2128, :column 16, :end-line 2128, :end-column 27, :macro true, :arglists (quote ([bindings & body])), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/with-redefs, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2128, :macro true, :end-line 2128, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing."}, bit-clear {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1188, :column 31, :end-line 1188, :end-column 40, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-clear, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 40, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1188, :macro true, :end-line 1188, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, locking {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2846, :column 16, :end-line 2846, :end-column 23, :macro true, :arglists (quote ([x & forms])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/locking, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2846, :macro true, :end-line 2846, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env x & forms])}, list {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2484, :column 16, :end-line 2484, :end-column 20, :macro true, :arglists (quote ([] [x & xs])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env]), :arglists ([&form &env] [&form &env x & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/list, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env]), :arglists ([&form &env] [&form &env x & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2484, :macro true, :end-line 2484, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env] [&form &env x & xs])}, + {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1026, :column 31, :end-line 1026, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([] [x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core$macros/+, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([&form &env] [&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1026, :macro true, :end-line 1026, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, aset {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 998, :column 16, :end-line 998, :end-column 20, :macro true, :arglists (quote ([array idx val] [array idx idx2 & idxv])), :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env array idx val]), :arglists ([&form &env array idx val] [&form &env array idx idx2 & idxv]), :arglists-meta (nil nil)}}, :name cljs.core$macros/aset, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env array idx val]), :arglists ([&form &env array idx val] [&form &env array idx idx2 & idxv]), :arglists-meta (nil nil)}, :method-params ([&form &env array idx val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 998, :macro true, :end-line 998, :max-fixed-arity 5, :fn-var false, :arglists ([&form &env array idx val] [&form &env array idx idx2 & idxv])}, destructure {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 626, :column 12, :end-line 626, :end-column 23, :arglists (quote ([bindings]))}, :name cljs.core$macros/destructure, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 626, :end-line 626, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bindings]))}, defmulti {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2624, :column 16, :end-line 2624, :end-column 24, :macro true, :arglists (quote ([mm-name & options])), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env mm-name options)], :arglists ([&form &env mm-name & options]), :arglists-meta (nil)}}, :name cljs.core$macros/defmulti, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env mm-name options)], :arglists ([&form &env mm-name & options]), :arglists-meta (nil)}, :method-params [(&form &env mm-name options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2624, :macro true, :end-line 2624, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env mm-name & options]), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy"}, str {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 821, :column 16, :end-line 821, :end-column 19, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/str, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 821, :macro true, :end-line 821, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & xs])}, coercive-= {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 888, :column 16, :end-line 888, :end-column 26, :macro true, :arglists (quote ([x y]))}, :name cljs.core$macros/coercive-=, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 888, :macro true, :end-line 888, :max-fixed-arity 4, :fn-var false, :arglists (quote ([x y]))}, hash-map {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2514, :column 16, :end-line 2514, :end-column 24, :macro true, :arglists (quote ([] [& kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/hash-map, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2514, :macro true, :end-line 2514, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env] [&form &env & kvs])}, gen-apply-to-simple {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2750, :column 16, :end-line 2750, :end-column 35, :macro true, :arglists (quote ([f num-args args]))}, :name cljs.core$macros/gen-apply-to-simple, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 35, :method-params ([&form &env f num-args args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2750, :macro true, :end-line 2750, :max-fixed-arity 5, :fn-var false, :arglists (quote ([f num-args args]))}, if-let {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 339, :column 19, :end-line 339, :end-column 25, :macro true, :arglists (quote ([bindings then] [bindings then else & oldform])), :doc "bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-let, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}, :method-params ([&form &env bindings then]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 339, :macro true, :end-line 339, :max-fixed-arity 5, :fn-var false, :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :doc "bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else"}, add-ifn-methods {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1463, :column 13, :end-line 1463, :end-column 28, :private true, :arglists (quote ([type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/add-ifn-methods, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :method-params ([type type-sym p__20171]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1463, :end-line 1463, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym [f & meths :as form]]))}, false? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 944, :column 16, :end-line 944, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/false?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 944, :macro true, :end-line 944, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, case {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2227, :column 16, :end-line 2227, :end-column 20, :macro true, :arglists (quote ([e & clauses])), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env e clauses)], :arglists ([&form &env e & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/case, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env e clauses)], :arglists ([&form &env e & clauses]), :arglists-meta (nil)}, :method-params [(&form &env e clauses)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2227, :macro true, :end-line 2227, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env e & clauses]), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type."}, exists? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 951, :column 16, :end-line 951, :end-column 23, :macro true, :arglists (quote ([x])), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript."}, :name cljs.core$macros/exists?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 951, :macro true, :end-line 951, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript."}, bit-not {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1161, :column 31, :end-line 1161, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/bit-not, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 38, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1161, :macro true, :end-line 1161, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, byte {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1032, :column 16, :end-line 1032, :end-column 20, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/byte, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 20, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1032, :macro true, :end-line 1032, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, max {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1146, :column 31, :end-line 1146, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/max, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1146, :macro true, :end-line 1146, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, == {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1126, :column 31, :end-line 1126, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/==, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1126, :macro true, :end-line 1126, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, lazy-cat {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2765, :column 16, :end-line 2765, :end-column 24, :macro true, :arglists (quote ([& colls])), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env colls)], :arglists ([&form &env & colls]), :arglists-meta (nil)}}, :name cljs.core$macros/lazy-cat, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env colls)], :arglists ([&form &env & colls]), :arglists-meta (nil)}, :method-params [(&form &env colls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2765, :macro true, :end-line 2765, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & colls]), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))"}, comment {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 155, :column 19, :end-line 155, :end-column 26, :macro true, :arglists (quote ([& body])), :doc "Ignores body, yields nil", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/comment, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 155, :macro true, :end-line 155, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & body]), :doc "Ignores body, yields nil"}, warn-and-update-protocol {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1374, :column 13, :end-line 1374, :end-column 37, :private true, :arglists (quote ([p type env]))}, :private true, :name cljs.core$macros/warn-and-update-protocol, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 37, :method-params ([p type env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1374, :end-line 1374, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p type env]))}, copy-arguments {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 3020, :column 16, :end-line 3020, :end-column 30, :macro true, :arglists (quote ([dest]))}, :name cljs.core$macros/copy-arguments, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 30, :method-params ([&form &env dest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3020, :macro true, :end-line 3020, :max-fixed-arity 3, :fn-var false, :arglists (quote ([dest]))}, when-assert {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2298, :column 26, :end-line 2298, :end-column 37, :private true, :macro true, :arglists (quote ([x]))}, :private true, :name cljs.core$macros/when-assert, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 37, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2298, :macro true, :end-line 2298, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, unsafe-cast {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 930, :column 16, :end-line 930, :end-column 27, :macro true, :arglists (quote ([t x])), :doc "EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type."}, :name cljs.core$macros/unsafe-cast, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([&form &env t x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 930, :macro true, :end-line 930, :max-fixed-arity 4, :fn-var false, :arglists (quote ([t x])), :doc "EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type."}, type-hint-multi-arity-sigs {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1567, :column 13, :end-line 1567, :end-column 39, :private true, :arglists (quote ([type-sym sigs]))}, :private true, :name cljs.core$macros/type-hint-multi-arity-sigs, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 39, :method-params ([type-sym sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1567, :end-line 1567, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym sigs]))}, resolve {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 3254, :column 16, :end-line 3254, :end-column 23, :macro true, :arglists (quote ([quoted-sym])), :doc "Returns the var to which a symbol will be resolved in the namespace else nil."}, :name cljs.core$macros/resolve, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([&form &env quoted-sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3254, :macro true, :end-line 3254, :max-fixed-arity 3, :fn-var false, :arglists (quote ([quoted-sym])), :doc "Returns the var to which a symbol will be resolved in the namespace else nil."}, defrecord {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1868, :column 16, :end-line 1868, :end-column 25, :macro true, :arglists (quote ([rsym fields & impls])), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env rsym fields impls)], :arglists ([&form &env rsym fields & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/defrecord, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env rsym fields impls)], :arglists ([&form &env rsym fields & impls]), :arglists-meta (nil)}, :method-params [(&form &env rsym fields impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1868, :macro true, :end-line 1868, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env rsym fields & impls]), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values."}, make-array {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2466, :column 16, :end-line 2466, :end-column 26, :macro true, :arglists (quote ([size] [type size] [type size & more-sizes])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env size] [&form &env type size]), :arglists ([&form &env size] [&form &env type size] [&form &env type size & more-sizes]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/make-array, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env size] [&form &env type size]), :arglists ([&form &env size] [&form &env type size] [&form &env type size & more-sizes]), :arglists-meta (nil nil nil)}, :method-params ([&form &env size] [&form &env type size]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 2466, :macro true, :end-line 2466, :max-fixed-arity 4, :fn-var false, :arglists ([&form &env size] [&form &env type size] [&form &env type size & more-sizes])}, unchecked-negate-int {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1073, :column 31, :end-line 1073, :end-column 51, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-negate-int, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 51, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1073, :macro true, :end-line 1073, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, simple-test-expr? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 835, :column 13, :end-line 835, :end-column 30, :private true, :arglists (quote ([env ast]))}, :private true, :name cljs.core$macros/simple-test-expr?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 30, :method-params ([env ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 835, :end-line 835, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env ast]))}, unchecked-inc {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1058, :column 31, :end-line 1058, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-inc, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 44, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1058, :macro true, :end-line 1058, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x])), :cljs.analyzer/numeric true}, and {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 840, :column 16, :end-line 840, :end-column 19, :macro true, :arglists (quote ([] [x] [x & next])), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/and, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}, :method-params ([&form &env] [&form &env x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 840, :macro true, :end-line 840, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env] [&form &env x] [&form &env x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true."}, number? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 976, :column 16, :end-line 976, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/number?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 976, :macro true, :end-line 976, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, gen-apply-to-simple-helper {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2726, :column 13, :end-line 2726, :end-column 39, :private true, :arglists (quote ([f num-args args]))}, :private true, :name cljs.core$macros/gen-apply-to-simple-helper, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 39, :method-params ([f num-args args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2726, :end-line 2726, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f num-args args]))}, assoc-test {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2205, :column 13, :end-line 2205, :end-column 23, :private true, :arglists (quote ([m test expr env]))}, :private true, :name cljs.core$macros/assoc-test, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([m test expr env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2205, :end-line 2205, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m test expr env]))}, js-comment {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 916, :column 16, :end-line 916, :end-column 26, :macro true, :arglists (quote ([comment])), :doc "Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline"}, :name cljs.core$macros/js-comment, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 26, :method-params ([&form &env comment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 916, :macro true, :end-line 916, :max-fixed-arity 3, :fn-var false, :arglists (quote ([comment])), :doc "Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline"}, validate-impls {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1537, :column 13, :end-line 1537, :end-column 27, :private true, :arglists (quote ([env impls]))}, :private true, :name cljs.core$macros/validate-impls, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 27, :method-params ([env impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1537, :end-line 1537, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env impls]))}, symbol? {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 979, :column 16, :end-line 979, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/symbol?, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 979, :macro true, :end-line 979, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, when-some {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 537, :column 19, :end-line 537, :end-column 28, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-some, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 537, :macro true, :end-line 537, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body]), :doc "bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test"}, unchecked-char {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1038, :column 16, :end-line 1038, :end-column 30, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-char, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 30, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1038, :macro true, :end-line 1038, :max-fixed-arity 3, :fn-var false, :arglists (quote ([x]))}, require-macros {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2905, :column 16, :end-line 2905, :end-column 30, :macro true, :arglists (quote ([& args])), :doc "Similar to require but only for macros.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/require-macros, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2905, :macro true, :end-line 2905, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & args]), :doc "Similar to require but only for macros."}, ->> {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 121, :column 19, :end-line 121, :end-column 22, :macro true, :arglists (quote ([x & forms])), :doc "Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/->>, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 121, :macro true, :end-line 121, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc."}, js-inline-comment {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 936, :column 16, :end-line 936, :end-column 33, :macro true, :arglists (quote ([comment])), :doc "Emit an inline JavaScript comment."}, :name cljs.core$macros/js-inline-comment, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 33, :method-params ([&form &env comment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 936, :macro true, :end-line 936, :max-fixed-arity 3, :fn-var false, :arglists (quote ([comment])), :doc "Emit an inline JavaScript comment."}, dt->et {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 1652, :column 12, :end-line 1652, :end-column 18, :arglists (quote ([type specs fields] [type specs fields inline])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([type specs fields] [type specs fields inline]), :arglists ([type specs fields] [type specs fields inline]), :arglists-meta (nil nil)}}, :name cljs.core$macros/dt->et, :variadic false, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([type specs fields] [type specs fields inline]), :arglists ([type specs fields] [type specs fields inline]), :arglists-meta (nil nil)}, :method-params ([type specs fields] [type specs fields inline]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1652, :end-line 1652, :max-fixed-arity 4, :fn-var true, :arglists ([type specs fields] [type specs fields inline])}, refer-clojure {:protocol-inline nil, :meta {:file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :line 2937, :column 16, :end-line 2937, :end-column 29, :macro true, :arglists (quote ([& args])), :doc "Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/refer-clojure, :variadic true, :file "C:\\Users\\KyuBok\\.boot\\cache\\tmp\\Projects\\cwbn-clj\\cwbn\\a5o\\-9uliv9\\cwbn\\main.out\\cljs\\core.cljc", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2937, :macro true, :end-line 2937, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & args]), :doc "Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes."}}, :cljs.spec/registry-ref [], :require-macros {core cljs.core, cljs.core cljs.core, cljs.support cljs.support}, :cljs.analyzer/constants {:seen #{cljs.core$macros/or cljs.core/-rest :invoke-ctor ITransientAssociative .-cljs$lang$ctorPrWriter & seq this__20251__auto__ self__ case* :extending-base-js-type cljs.core/PROTOCOL_SENTINEL cljs.core$macros/- cljs.core/rest ret__20792__auto__ -with-meta :cljs.analyzer/namespaces :unsupported-preprocess-value defrecord* i__20473__auto__ -prototype cljs.core$macros/zero? js/Function temp__19604__auto__ -iterator cljs.core/str cljs.core$macros/extend-type cljs.core/PersistentHashMap try Object ILookup cljs.core/MultiFn cljs.core/checked-aset' :redef cljs.core$macros/nil? -assoc l__20568__auto__ js/goog IKVReduce :js .-fqn -conj cljs.core$macros/defonce cljs.core$macros/bit-and ITransientMap cljs.core$macros/identical? :fname cljs.core$macros/instance? coll__20246__auto__ boolean :js-shadowed-by-local cljs.core/PersistentHashSet. cljs.core/Var. cljs.core/specify! cljs.core/pr-sequential-writer x__19966__auto__ :let cljs.core$macros/dotimes this__20271__auto__ :unsupported-js-module-type object cljs.core/vector? cljs.core/PersistentArrayMap :cljs.core$macros/not-found :invalid-protocol-symbol :meta xs__19518__auto__ this-as cljs.core/= .. -clone this__20228__auto__ l__20571__auto__ -count cljs.core/MultiFn. cljs.core$macros// cljs.core/checked-aget' .createAsIfByAssoc args-arr__20780__auto__ cljs.core$macros/vector sb__20639__auto__ cljs.core/-assoc :pre cljs.core$macros/bit-or var_args cljs.core$macros/array cljs.core/-write .-constructor cljs.core$macros/assert y__19967__auto__ this__20247__auto__ this__20253__auto__ :instance cljs.core/IndexedSeq IIndexed cljs.core/-deref :private :extend elapsed__20617__auto__ IPrintWithWriter :else cljs.core/pr-writer :when IVector IIterable cljs.core$macros/loop cljs.core/-iterator cljs.core$macros/>= :protocol-duped-method :protocol-symbol .toFixed :protocol .apply cljs.core/count x__19736__auto__ nodeGlobalRequire ns* cljs.core/hash-map goog/typeOf cljs.core/reduce cljs.core/seq js/Date. cljs.core/chunk-first :use-macros ret__20614__auto__ cljs.core/IFn cljs.core$macros/cond cljs.core/get-global-hierarchy cljs.core/apply args :locals opts__20265__auto__ cljs.core$macros/condp finally cljs.core/Keyword :method cljs.core/prn :use IMeta :default apply-to -lookup ICloneable cljs.core/aclone loop* :protocols :ns iterys__20412__auto__ -pr-writer cljs.core$macros/binding cljs.core/chunk argc :def-emits-var INext :name ICounted IMapEntry :munged-namespace this__20261__auto__ :as cljs.core/es6-iterator &form a__20567__auto__ cljs.core$macros/with-redefs cljs.core$macros/inc :nonchar cljs.core/dissoc IStack :variadic cljs.core/keyword-identical? cljs.core/*print-newline* x__20640__auto__ cljs.core/Delay cljs.core/LazySeq cljs.core/chunk-rest :constant cljs.core/atom x__20069__auto__ IReversible method-cache__20590__auto__ :or cljs.core/-with-meta h__20067__auto__ cljs.core$macros/coercive-= this__20258__auto__ cljs.core$macros/str cljs.core$macros/if-let keyval__20267__auto__ :file cljs.core/concat -> cljs.core$macros/list cljs.core$macros/+ this__20657__auto__ start__20613__auto__ :end-column cljs.core$macros/aset :single-segment-namespace __hash IHash cljs.core$macros/exists? :fn-arity :top-fn cljs.core$macros/== method-table__20588__auto__ :require IEquiv fs__20413__auto__ cljs.core$macros/max cljs.core$macros/case cljs.core$macros/copy-arguments this__20249__auto__ js/Boolean ITransientVector writer__20264__auto__ RecordIter. cljs.core/native-satisfies? .append .concat js/String do __meta argseq__20781__auto__ :method-params call number IEditableCollection cljs.core/contains? :op size__20415__auto__ :current-symbol cljs.core/into :>> s__20637__auto__ :cljs.analyzer/type this else__20252__auto__ c__19735__auto__ :infer-warning :variadic-max-arity cljs.core/-conj letfn* :protocol-with-variadic-method if cljs.core$macros/unchecked-inc cljs.core$macros/and IReset arr__20636__auto__ :arglists-meta IEmptyableCollection :imports :cljs.analyzer/protocol-inline % IRecord new other :fn-deprecated IDerefWithTimeout temp__19530__auto__ :anonymous ISet args__20769__auto__ IPending c__20452__auto__ :column cljs.core/not-native .getTime :cljs.analyzer/protocol-impl default .fromArray cljs.core$macros/->> cljs.core/-first len__20766__auto__ cljs.core$macros/when-first :undeclared-var cljs.core/PersistentVector -equiv :internal-ctor writer__20229__auto__ cljs.core/ISeq cljs.core$macros/unsafe-bit-and .-prototype cljs.core/List .push temp__19475__auto__ cljs.core/-add-method m__20283__auto__ println opt__20230__auto__ cljs.core/checked-aget cljs.core/make-array ISwap :preamble-missing .-cljs$lang$ctorStr cljs.core/get .fromArrays :positional goog.object/set cljs.core/cond :factory :const INamed deftype* IReduce let* cljs.core/chunk-append js/Array ITransientCollection hierarchy__20592__auto__ a__20570__auto__ cljs.core/-nth dims__20471__auto__ :methods not-native js* ___20615__auto__ :undeclared-protocol-symbol :undeclared cljs.core/IMeta cljs.core$macros/coercive-not end__20616__auto__ cljs.core$macros/dec :dynamic :line cljs.core/not-empty cljs.core$macros/unchecked-get :var cljs.core/PersistentArrayMap. fn* :protocol-info -cljs$lang$applyTo cljs.core$macros/caching-hash recur cljs.core/-vreset! :macro cljs.core$macros/this-as :invalid-array-access cljs.core/symbol :unprovided :deprecation-nowarn cljs.core$macros/< cljs.core/mod or__19698__auto__ js/Error. :ns-var-clash .-getBasis :deprecated dimarray__20472__auto__ .-cljs$lang$type :undeclared-ns this__20248__auto__ cljs.core/missing-protocol -meta IMap this__20245__auto__ temp__19618__auto__ array prefer-table__20589__auto__ :defs ISeq cljs.core/-lookup x__19980__auto__ &env x__20486__auto__ string cljs.core$macros/some? :declared iter__20416__auto__ cljs.core/nth x__20282__auto__ cljs.core/PersistentHashSet argseq__20770__auto__ IMultiFn .slice goog/define IAssociative function cljs$core$IFn$_invoke$arity$variadic cljs.core$macros/implements? cljs.core/nil-iter i__20767__auto__ ISeqable :end-line cljs.core$macros/alength :cljs.analyzer/no-resolve ISequential .call cljs.core$macros/if-not :invoke :print-fn IChunkedSeq cljs.core/next :post cljs.core$macros/bit-xor :undeclared-ns-form -dissoc this__20263__auto__ k__20259__auto__ k__20250__auto__ IAtom cljs.core$macros/when-let map-> cljs.core$macros/mask IWatchable :no-such-method :refer-clojure cljs.core$macros/coercive-boolean .-__extmap cljs.core/chunk-cons cljs.core/*print-fn* cljs.core$macros/deftype ITransientSet start__20610__auto__ cljs.core/not pr-pair__20266__auto__ :require-macros cljs.core$macros/* :max-fixed-arity cljs.core$macros/min entry__20255__auto__ n__20573__auto__ set! cljs.core/cons :tag :invalid-arithmetic cljs.core$macros/<= cljs.core/assoc -cljs$lang$maxFixedArity cljs.core$macros/if-some :dot :protocol-deprecated cljs.core$macros/-> . IWithMeta var :mutable cljs.core/system-time cljs.core/chunk-buffer quote cljs.core/Symbol this__20254__auto__ p__20367__auto__ ICollection :while ASeq cljs.core$macros/lazy-seq cljs.core$macros/js-delete IFn :fn-var :arglists :protocol-impl-recur-with-target :skip-protocol-flag cljs.core$macros/let :import and__19683__auto__ cljs.core$macros/fn :impls :hierarchy cljs.core/hash-unordered-coll js/Object cljs.core$macros/bit-and-not js/Array. IComparable :doc -cljs$lang$macro cljs.core$macros/when-not :overload-arity cljs.core/PersistentVector. writer__20272__auto__ cljs.core/clone apply cljs.core/first :protocol-multiple-impls cljs.core$macros/js-this y__19981__auto__ :jsdoc IChunkedNext js/Number :redef-in-file cljs.core$macros/js-arguments k__20257__auto__ :protocol-invalid-method :invalid-arity :extend-type-invalid-method-shape .-EMPTY cljs.core$macros/keyword? cljs.core/IWithMeta cached-hierarchy__20591__auto__ IWriter :suggested-symbol :map cljs.core/list __extmap cljs.core$macros/when ret__20611__auto__ :multiple-variadic-overloads cljs.core$macros/> c__20414__auto__ IDeref ISorted *unchecked-if* throw cljs.core/array js/goog.string.StringBuffer. .-cljs$lang$ctorPrSeq this__20256__auto__ this__20244__auto__ cljs.core$macros/defn -hash cljs.core/checked-aset .-EMPTY-NODE def cljs.core$macros/declare cljs.core/chunked-seq? IList :protocol-impl-with-variadic-method f cljs.core/ITER_SYMBOL .-call -seq}, :order [. .. if cljs.core/cond do def :declared cljs.core$macros/let cljs.core$macros/extend-type :pre :post % cljs.core$macros/assert fn* cljs.core$macros/defn :private cljs.core$macros/if-let temp__19475__auto__ cljs.core$macros/if-not cljs.core/not letfn* cljs.core$macros/fn cljs.core$macros/when-let xs__19518__auto__ cljs.core/seq cljs.core/first temp__19530__auto__ cljs.core$macros/when cljs.core$macros/loop recur cljs.core$macros/-> cljs.core$macros/->> cljs.core$macros/nil? cljs.core$macros/if-some temp__19604__auto__ temp__19618__auto__ &form cljs.core$macros/when-not cljs.core$macros/exists? & :as :else cljs.core/next cljs.core/nth :or cljs.core$macros/implements? cljs.core/ISeq cljs.core/apply cljs.core/hash-map quote cljs.core/get cljs.core$macros/declare js* goog/define let* loop* IFn ICounted IEmptyableCollection ICollection IIndexed ASeq ISeq INext ILookup IAssociative IMap IMapEntry ISet IStack IVector IDeref IDerefWithTimeout IMeta IWithMeta IReduce IKVReduce IEquiv IHash ISeqable ISequential IList IRecord IReversible ISorted IPrintWithWriter IWriter IPending IWatchable IEditableCollection ITransientCollection ITransientAssociative ITransientMap ITransientVector ITransientSet IMultiFn IChunkedSeq IChunkedNext IComparable INamed ICloneable IAtom IReset ISwap IIterable :tag boolean :js :constant :var :invoke :dot :op seq :invoke-ctor :extending-base-js-type :unsupported-preprocess-value :redef :js-shadowed-by-local :unsupported-js-module-type :invalid-protocol-symbol :protocol-duped-method :munged-namespace :single-segment-namespace :fn-arity :infer-warning :variadic-max-arity :protocol-with-variadic-method :fn-deprecated :undeclared-var :preamble-missing :undeclared-protocol-symbol :dynamic :invalid-array-access :unprovided :ns-var-clash :undeclared-ns :undeclared-ns-form :invalid-arithmetic :protocol-deprecated :fn-var :protocol-impl-recur-with-target :overload-arity :protocol-multiple-impls :redef-in-file :protocol-invalid-method :extend-type-invalid-method-shape :multiple-variadic-overloads :protocol-impl-with-variadic-method and__19683__auto__ cljs.core$macros/and or__19698__auto__ cljs.core$macros/or cljs.core$macros/coercive-= :cljs.analyzer/no-resolve c__19735__auto__ x__19736__auto__ cljs.core$macros/instance? cljs.core/Symbol cljs.core/Keyword cljs.core/checked-aget cljs.core/checked-aget' cljs.core/checked-aset cljs.core/checked-aset' cljs.core$macros/+ cljs.core$macros/dec cljs.core$macros// cljs.core$macros/inc cljs.core$macros/* cljs.core$macros/- cljs.core/mod cljs.core$macros/< cljs.core$macros/<= cljs.core$macros/> cljs.core$macros/>= cljs.core$macros/== x__19966__auto__ y__19967__auto__ cljs.core$macros/max x__19980__auto__ y__19981__auto__ cljs.core$macros/min cljs.core$macros/bit-and cljs.core$macros/unsafe-bit-and cljs.core$macros/bit-or cljs.core$macros/bit-xor cljs.core$macros/bit-and-not cljs.core$macros/mask h__20067__auto__ set! x__20069__auto__ object string number array function default js/Boolean js/String js/Array js/Object js/Number js/Function :anonymous :locals :name :ns cljs.core$macros/deftype cljs.core/IWithMeta -with-meta new cljs.core/IMeta -meta :extend :instance cljs.core/specify! cljs.core/clone cljs.core$macros/js-this Object :protocol-symbol :protocol :deprecated :deprecation-nowarn :cljs.analyzer/namespaces :defs :impls :undeclared goog.object/set :hierarchy :default -prototype this-as self__ cljs.core$macros/this-as call apply .apply .-call .concat cljs.core$macros/array cljs.core/aclone :skip-protocol-flag cljs.core/PROTOCOL_SENTINEL cljs.core/IFn :methods :protocol-info :cljs.core$macros/not-found :fname :no-such-method :invalid-arity :method :current-symbol :suggested-symbol :cljs.analyzer/type :cljs.analyzer/protocol-impl :cljs.analyzer/protocol-inline -> :factory :positional :internal-ctor :protocols deftype* .-getBasis .-cljs$lang$type .-cljs$lang$ctorStr .-cljs$lang$ctorPrWriter this__20228__auto__ writer__20229__auto__ opt__20230__auto__ cljs.core/-write __meta __extmap __hash :mutable -clone this__20244__auto__ -hash this__20245__auto__ cljs.core$macros/caching-hash coll__20246__auto__ cljs.core/hash-unordered-coll this other -equiv cljs.core$macros/some? cljs.core$macros/identical? .-constructor cljs.core/= .-__extmap this__20247__auto__ this__20248__auto__ -lookup this__20249__auto__ k__20250__auto__ cljs.core/-lookup this__20251__auto__ else__20252__auto__ cljs.core$macros/case -count this__20253__auto__ cljs.core/count -conj this__20254__auto__ entry__20255__auto__ cljs.core/vector? cljs.core/-assoc cljs.core/-nth cljs.core/reduce cljs.core/-conj -assoc this__20256__auto__ k__20257__auto__ cljs.core$macros/condp cljs.core/keyword-identical? cljs.core/assoc -dissoc this__20258__auto__ k__20259__auto__ cljs.core/contains? cljs.core/dissoc cljs.core/-with-meta cljs.core/into cljs.core/not-empty -seq this__20261__auto__ cljs.core/concat cljs.core$macros/vector -iterator RecordIter. cljs.core/-iterator cljs.core/nil-iter -pr-writer this__20263__auto__ writer__20264__auto__ opts__20265__auto__ pr-pair__20266__auto__ keyval__20267__auto__ cljs.core/pr-sequential-writer cljs.core/pr-writer defrecord* map-> :map .-cljs$lang$ctorPrSeq this__20271__auto__ cljs.core/list writer__20272__auto__ :doc x__20282__auto__ m__20283__auto__ cljs.core$macros/unchecked-get goog/typeOf throw cljs.core/missing-protocol :jsdoc *unchecked-if* cljs.core$macros/coercive-not cljs.core/native-satisfies? cljs.core/LazySeq cljs.core/Delay try finally cljs.core$macros/with-redefs :>> js/Error. cljs.core/str p__20367__auto__ :line :const :nonchar case* cljs.core$macros/keyword? .-fqn cljs.core$macros/cond :let :while :when cljs.core/rest iterys__20412__auto__ fs__20413__auto__ cljs.core/cons cljs.core$macros/lazy-seq cljs.core$macros/when-first cljs.core$macros/unchecked-inc cljs.core/chunk-append cljs.core/chunked-seq? c__20414__auto__ cljs.core/chunk-first :file :column :end-line :end-column cljs.core/not-native size__20415__auto__ cljs.core/chunk-buffer cljs.core$macros/coercive-boolean cljs.core/chunk-cons cljs.core/chunk cljs.core/chunk-rest iter__20416__auto__ not-native c__20452__auto__ js/Array. cljs.core/make-array dims__20471__auto__ cljs.core$macros/list dimarray__20472__auto__ cljs.core$macros/dotimes i__20473__auto__ cljs.core$macros/alength cljs.core$macros/aset .-EMPTY cljs.core/List x__20486__auto__ cljs.core/PersistentVector cljs.core/PersistentVector. .-EMPTY-NODE .fromArray cljs.core/PersistentArrayMap cljs.core/PersistentArrayMap. .createAsIfByAssoc cljs.core/PersistentHashMap .fromArrays cljs.core/PersistentHashSet cljs.core/PersistentHashSet. a__20567__auto__ l__20568__auto__ a__20570__auto__ l__20571__auto__ n__20573__auto__ cljs.core$macros/defonce method-table__20588__auto__ cljs.core/atom prefer-table__20589__auto__ method-cache__20590__auto__ cached-hierarchy__20591__auto__ hierarchy__20592__auto__ cljs.core/get-global-hierarchy cljs.core/MultiFn. cljs.core/symbol cljs.core/-add-method cljs.core/MultiFn start__20610__auto__ cljs.core/system-time ret__20611__auto__ cljs.core/prn .toFixed :print-fn println start__20613__auto__ .getTime js/Date. ret__20614__auto__ ___20615__auto__ end__20616__auto__ elapsed__20617__auto__ cljs.core$macros/str cljs.core/-first args cljs.core/-rest argc f apply-to cljs.core$macros/zero? .call arr__20636__auto__ cljs.core/array s__20637__auto__ .push sb__20639__auto__ js/goog.string.StringBuffer. cljs.core$macros/binding cljs.core/*print-newline* cljs.core/*print-fn* x__20640__auto__ .append .-prototype cljs.core/ITER_SYMBOL this__20657__auto__ cljs.core/es6-iterator var :meta :imports cljs.core$macros/js-delete cljs.core/-vreset! cljs.core/-deref ns* :require :require-macros :use :use-macros :import :refer-clojure js/goog nodeGlobalRequire cljs$core$IFn$_invoke$arity$variadic -cljs$lang$maxFixedArity -cljs$lang$applyTo len__20766__auto__ cljs.core$macros/js-arguments i__20767__auto__ :top-fn :variadic :max-fixed-arity :method-params :arglists :arglists-meta var_args args__20769__auto__ cljs.core$macros/copy-arguments argseq__20770__auto__ cljs.core/IndexedSeq .slice args-arr__20780__auto__ argseq__20781__auto__ :macro :def-emits-var &env ret__20792__auto__ -cljs$lang$macro cljs.core/Var.]}, :doc nil}